
ATmega32A_MCU0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  00800060  00000452  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000118  00000000  00000000  00000482  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001429  00000000  00000000  0000059a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000079d  00000000  00000000  000019c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000727  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000354  00000000  00000000  00002888  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000089c  00000000  00000000  00002bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000c11  00000000  00000000  00003478  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c8  00000000  00000000  00004089  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_1>
   8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_2>
   c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 c0 01 	jmp	0x380	; 0x380 <__vector_10>
  2c:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 ed 01 	jmp	0x3da	; 0x3da <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <LCD.h>
#include <Atmega32A_SPI.h>

int main(void)
{
	SPI_Init(SPI_FCPU_DIV32,SPI_DoubleSpeedDisable,SPI_MasterMode,SPI_MSBFirst,SPI_InterruptDisable,SPI_Mode0);			
  92:	e1 2c       	mov	r14, r1
  94:	00 e0       	ldi	r16, 0x00	; 0
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	40 e1       	ldi	r20, 0x10	; 16
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	0e 94 67 01 	call	0x2ce	; 0x2ce <SPI_Init>
	char x = 'A';
  a2:	c1 e4       	ldi	r28, 0x41	; 65

	while(1)
    {		
		GPIO_OutputHandle(GPIOB,PIN4,LOW);	
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	64 e0       	ldi	r22, 0x04	; 4
  a8:	86 e3       	ldi	r24, 0x36	; 54
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 ba 00 	call	0x174	; 0x174 <GPIO_OutputHandle>
		SPI_Write(x);
  b0:	8c 2f       	mov	r24, r28
  b2:	0e 94 8f 01 	call	0x31e	; 0x31e <SPI_Write>
		GPIO_OutputHandle(GPIOB,PIN4,HIGH);	
  b6:	41 e0       	ldi	r20, 0x01	; 1
  b8:	64 e0       	ldi	r22, 0x04	; 4
  ba:	86 e3       	ldi	r24, 0x36	; 54
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 ba 00 	call	0x174	; 0x174 <GPIO_OutputHandle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	83 ed       	ldi	r24, 0xD3	; 211
  c6:	90 e3       	ldi	r25, 0x30	; 48
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x36>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x40>
  d2:	00 00       	nop
		_delay_ms(1000);
		x++;
  d4:	cf 5f       	subi	r28, 0xFF	; 255
  d6:	e6 cf       	rjmp	.-52     	; 0xa4 <main+0x12>

000000d8 <GPIO_DirectionSet>:
  d8:	fc 01       	movw	r30, r24
  da:	41 30       	cpi	r20, 0x01	; 1
  dc:	d9 f0       	breq	.+54     	; 0x114 <GPIO_DirectionSet+0x3c>
  de:	18 f0       	brcs	.+6      	; 0xe6 <GPIO_DirectionSet+0xe>
  e0:	42 30       	cpi	r20, 0x02	; 2
  e2:	81 f1       	breq	.+96     	; 0x144 <GPIO_DirectionSet+0x6c>
  e4:	08 95       	ret
  e6:	68 30       	cpi	r22, 0x08	; 8
  e8:	91 f0       	breq	.+36     	; 0x10e <GPIO_DirectionSet+0x36>
  ea:	21 81       	ldd	r18, Z+1	; 0x01
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <GPIO_DirectionSet+0x20>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <GPIO_DirectionSet+0x1c>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	86 2f       	mov	r24, r22
 102:	82 23       	and	r24, r18
 104:	81 83       	std	Z+1, r24	; 0x01
 106:	82 81       	ldd	r24, Z+2	; 0x02
 108:	68 23       	and	r22, r24
 10a:	62 83       	std	Z+2, r22	; 0x02
 10c:	08 95       	ret
 10e:	11 82       	std	Z+1, r1	; 0x01
 110:	12 82       	std	Z+2, r1	; 0x02
 112:	08 95       	ret
 114:	68 30       	cpi	r22, 0x08	; 8
 116:	91 f0       	breq	.+36     	; 0x13c <GPIO_DirectionSet+0x64>
 118:	21 81       	ldd	r18, Z+1	; 0x01
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	ac 01       	movw	r20, r24
 120:	02 c0       	rjmp	.+4      	; 0x126 <GPIO_DirectionSet+0x4e>
 122:	44 0f       	add	r20, r20
 124:	55 1f       	adc	r21, r21
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <GPIO_DirectionSet+0x4a>
 12a:	ba 01       	movw	r22, r20
 12c:	84 2f       	mov	r24, r20
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	81 83       	std	Z+1, r24	; 0x01
 134:	82 81       	ldd	r24, Z+2	; 0x02
 136:	68 2b       	or	r22, r24
 138:	62 83       	std	Z+2, r22	; 0x02
 13a:	08 95       	ret
 13c:	11 82       	std	Z+1, r1	; 0x01
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	82 83       	std	Z+2, r24	; 0x02
 142:	08 95       	ret
 144:	68 30       	cpi	r22, 0x08	; 8
 146:	91 f0       	breq	.+36     	; 0x16c <GPIO_DirectionSet+0x94>
 148:	21 81       	ldd	r18, Z+1	; 0x01
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	ac 01       	movw	r20, r24
 150:	02 c0       	rjmp	.+4      	; 0x156 <GPIO_DirectionSet+0x7e>
 152:	44 0f       	add	r20, r20
 154:	55 1f       	adc	r21, r21
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <GPIO_DirectionSet+0x7a>
 15a:	ba 01       	movw	r22, r20
 15c:	82 2f       	mov	r24, r18
 15e:	84 2b       	or	r24, r20
 160:	81 83       	std	Z+1, r24	; 0x01
 162:	82 81       	ldd	r24, Z+2	; 0x02
 164:	60 95       	com	r22
 166:	68 23       	and	r22, r24
 168:	62 83       	std	Z+2, r22	; 0x02
 16a:	08 95       	ret
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	81 83       	std	Z+1, r24	; 0x01
 170:	12 82       	std	Z+2, r1	; 0x02
 172:	08 95       	ret

00000174 <GPIO_OutputHandle>:
 174:	68 30       	cpi	r22, 0x08	; 8
 176:	09 f1       	breq	.+66     	; 0x1ba <GPIO_OutputHandle+0x46>
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	79 f4       	brne	.+30     	; 0x19a <GPIO_OutputHandle+0x26>
 17c:	fc 01       	movw	r30, r24
 17e:	42 81       	ldd	r20, Z+2	; 0x02
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	f9 01       	movw	r30, r18
 186:	02 c0       	rjmp	.+4      	; 0x18c <GPIO_OutputHandle+0x18>
 188:	ee 0f       	add	r30, r30
 18a:	ff 1f       	adc	r31, r31
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <GPIO_OutputHandle+0x14>
 190:	bf 01       	movw	r22, r30
 192:	64 2b       	or	r22, r20
 194:	fc 01       	movw	r30, r24
 196:	62 83       	std	Z+2, r22	; 0x02
 198:	08 95       	ret
 19a:	fc 01       	movw	r30, r24
 19c:	42 81       	ldd	r20, Z+2	; 0x02
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	f9 01       	movw	r30, r18
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <GPIO_OutputHandle+0x36>
 1a6:	ee 0f       	add	r30, r30
 1a8:	ff 1f       	adc	r31, r31
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <GPIO_OutputHandle+0x32>
 1ae:	bf 01       	movw	r22, r30
 1b0:	60 95       	com	r22
 1b2:	64 23       	and	r22, r20
 1b4:	fc 01       	movw	r30, r24
 1b6:	62 83       	std	Z+2, r22	; 0x02
 1b8:	08 95       	ret
 1ba:	fc 01       	movw	r30, r24
 1bc:	42 83       	std	Z+2, r20	; 0x02
 1be:	08 95       	ret

000001c0 <__vector_1>:
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	2f 93       	push	r18
 1cc:	3f 93       	push	r19
 1ce:	4f 93       	push	r20
 1d0:	5f 93       	push	r21
 1d2:	6f 93       	push	r22
 1d4:	7f 93       	push	r23
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	af 93       	push	r26
 1dc:	bf 93       	push	r27
 1de:	ef 93       	push	r30
 1e0:	ff 93       	push	r31
 1e2:	80 91 64 00 	lds	r24, 0x0064
 1e6:	90 91 65 00 	lds	r25, 0x0065
 1ea:	89 2b       	or	r24, r25
 1ec:	29 f0       	breq	.+10     	; 0x1f8 <__vector_1+0x38>
 1ee:	e0 91 64 00 	lds	r30, 0x0064
 1f2:	f0 91 65 00 	lds	r31, 0x0065
 1f6:	09 95       	icall
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	bf 91       	pop	r27
 1fe:	af 91       	pop	r26
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	7f 91       	pop	r23
 206:	6f 91       	pop	r22
 208:	5f 91       	pop	r21
 20a:	4f 91       	pop	r20
 20c:	3f 91       	pop	r19
 20e:	2f 91       	pop	r18
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <__vector_2>:
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	2f 93       	push	r18
 226:	3f 93       	push	r19
 228:	4f 93       	push	r20
 22a:	5f 93       	push	r21
 22c:	6f 93       	push	r22
 22e:	7f 93       	push	r23
 230:	8f 93       	push	r24
 232:	9f 93       	push	r25
 234:	af 93       	push	r26
 236:	bf 93       	push	r27
 238:	ef 93       	push	r30
 23a:	ff 93       	push	r31
 23c:	80 91 62 00 	lds	r24, 0x0062
 240:	90 91 63 00 	lds	r25, 0x0063
 244:	89 2b       	or	r24, r25
 246:	29 f0       	breq	.+10     	; 0x252 <__vector_2+0x38>
 248:	e0 91 62 00 	lds	r30, 0x0062
 24c:	f0 91 63 00 	lds	r31, 0x0063
 250:	09 95       	icall
 252:	ff 91       	pop	r31
 254:	ef 91       	pop	r30
 256:	bf 91       	pop	r27
 258:	af 91       	pop	r26
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	7f 91       	pop	r23
 260:	6f 91       	pop	r22
 262:	5f 91       	pop	r21
 264:	4f 91       	pop	r20
 266:	3f 91       	pop	r19
 268:	2f 91       	pop	r18
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <__vector_3>:
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	2f 93       	push	r18
 280:	3f 93       	push	r19
 282:	4f 93       	push	r20
 284:	5f 93       	push	r21
 286:	6f 93       	push	r22
 288:	7f 93       	push	r23
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25
 28e:	af 93       	push	r26
 290:	bf 93       	push	r27
 292:	ef 93       	push	r30
 294:	ff 93       	push	r31
 296:	80 91 60 00 	lds	r24, 0x0060
 29a:	90 91 61 00 	lds	r25, 0x0061
 29e:	89 2b       	or	r24, r25
 2a0:	29 f0       	breq	.+10     	; 0x2ac <__vector_3+0x38>
 2a2:	e0 91 60 00 	lds	r30, 0x0060
 2a6:	f0 91 61 00 	lds	r31, 0x0061
 2aa:	09 95       	icall
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	bf 91       	pop	r27
 2b2:	af 91       	pop	r26
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	7f 91       	pop	r23
 2ba:	6f 91       	pop	r22
 2bc:	5f 91       	pop	r21
 2be:	4f 91       	pop	r20
 2c0:	3f 91       	pop	r19
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <SPI_Init>:
				SPI_DoubleSpeed DoubleSpeed,
				SPI_MSTR MasterMode,
				SPI_DataOrder DataOrder,
				SPI_Interrupt State,
				SPI_Modes SMode)
{
 2ce:	ef 92       	push	r14
 2d0:	0f 93       	push	r16
	SPSR->Data = DoubleSpeed;
 2d2:	6e b9       	out	0x0e, r22	; 14
	SPCR->Data = Clk | MasterMode | DataOrder | State | SMode | SPI_ENABLE; 
 2d4:	9e 2d       	mov	r25, r14
 2d6:	90 64       	ori	r25, 0x40	; 64
 2d8:	09 2b       	or	r16, r25
 2da:	20 2b       	or	r18, r16
 2dc:	24 2b       	or	r18, r20
 2de:	82 2b       	or	r24, r18
 2e0:	8d b9       	out	0x0d, r24	; 13
	if ( MasterMode == SPI_MasterMode)
 2e2:	40 31       	cpi	r20, 0x10	; 16
 2e4:	99 f4       	brne	.+38     	; 0x30c <SPI_Init+0x3e>
	{
		GPIO_DirectionSet(GPIOB,PIN5,OUTPUT);
 2e6:	42 e0       	ldi	r20, 0x02	; 2
 2e8:	65 e0       	ldi	r22, 0x05	; 5
 2ea:	86 e3       	ldi	r24, 0x36	; 54
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_DirectionSet>
		GPIO_DirectionSet(GPIOB,PIN4,OUTPUT);
 2f2:	42 e0       	ldi	r20, 0x02	; 2
 2f4:	64 e0       	ldi	r22, 0x04	; 4
 2f6:	86 e3       	ldi	r24, 0x36	; 54
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_DirectionSet>
		GPIO_DirectionSet(GPIOB,PIN7,OUTPUT);
 2fe:	42 e0       	ldi	r20, 0x02	; 2
 300:	67 e0       	ldi	r22, 0x07	; 7
 302:	86 e3       	ldi	r24, 0x36	; 54
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_DirectionSet>
 30a:	06 c0       	rjmp	.+12     	; 0x318 <SPI_Init+0x4a>
	}
	else
	{
		GPIO_DirectionSet(GPIOB,PIN6,INPUT_FLOAT);
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	66 e0       	ldi	r22, 0x06	; 6
 310:	86 e3       	ldi	r24, 0x36	; 54
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_DirectionSet>
	}

}
 318:	0f 91       	pop	r16
 31a:	ef 90       	pop	r14
 31c:	08 95       	ret

0000031e <SPI_Write>:

void SPI_Write(uint8_t Data)
{
	SPDR->Data = Data;
 31e:	8f b9       	out	0x0f, r24	; 15
	while(SPSR->Bits.B7 == 0){}
 320:	77 9b       	sbis	0x0e, 7	; 14
 322:	fe cf       	rjmp	.-4      	; 0x320 <SPI_Write+0x2>
	
}
 324:	08 95       	ret

00000326 <__vector_11>:
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	2f 93       	push	r18
 332:	3f 93       	push	r19
 334:	4f 93       	push	r20
 336:	5f 93       	push	r21
 338:	6f 93       	push	r22
 33a:	7f 93       	push	r23
 33c:	8f 93       	push	r24
 33e:	9f 93       	push	r25
 340:	af 93       	push	r26
 342:	bf 93       	push	r27
 344:	ef 93       	push	r30
 346:	ff 93       	push	r31
 348:	80 91 68 00 	lds	r24, 0x0068
 34c:	90 91 69 00 	lds	r25, 0x0069
 350:	89 2b       	or	r24, r25
 352:	29 f0       	breq	.+10     	; 0x35e <__vector_11+0x38>
 354:	e0 91 68 00 	lds	r30, 0x0068
 358:	f0 91 69 00 	lds	r31, 0x0069
 35c:	09 95       	icall
 35e:	ff 91       	pop	r31
 360:	ef 91       	pop	r30
 362:	bf 91       	pop	r27
 364:	af 91       	pop	r26
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	7f 91       	pop	r23
 36c:	6f 91       	pop	r22
 36e:	5f 91       	pop	r21
 370:	4f 91       	pop	r20
 372:	3f 91       	pop	r19
 374:	2f 91       	pop	r18
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <__vector_10>:
 380:	1f 92       	push	r1
 382:	0f 92       	push	r0
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	0f 92       	push	r0
 388:	11 24       	eor	r1, r1
 38a:	2f 93       	push	r18
 38c:	3f 93       	push	r19
 38e:	4f 93       	push	r20
 390:	5f 93       	push	r21
 392:	6f 93       	push	r22
 394:	7f 93       	push	r23
 396:	8f 93       	push	r24
 398:	9f 93       	push	r25
 39a:	af 93       	push	r26
 39c:	bf 93       	push	r27
 39e:	ef 93       	push	r30
 3a0:	ff 93       	push	r31
 3a2:	80 91 66 00 	lds	r24, 0x0066
 3a6:	90 91 67 00 	lds	r25, 0x0067
 3aa:	89 2b       	or	r24, r25
 3ac:	29 f0       	breq	.+10     	; 0x3b8 <__vector_10+0x38>
 3ae:	e0 91 66 00 	lds	r30, 0x0066
 3b2:	f0 91 67 00 	lds	r31, 0x0067
 3b6:	09 95       	icall
 3b8:	ff 91       	pop	r31
 3ba:	ef 91       	pop	r30
 3bc:	bf 91       	pop	r27
 3be:	af 91       	pop	r26
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	7f 91       	pop	r23
 3c6:	6f 91       	pop	r22
 3c8:	5f 91       	pop	r21
 3ca:	4f 91       	pop	r20
 3cc:	3f 91       	pop	r19
 3ce:	2f 91       	pop	r18
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <_exit>:
 3da:	f8 94       	cli

000003dc <__stop_program>:
 3dc:	ff cf       	rjmp	.-2      	; 0x3dc <__stop_program>
