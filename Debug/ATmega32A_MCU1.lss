
ATmega32A_MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000143c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ec  00800060  0000143c  000014d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000076  0080024c  0080024c  000016bc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000333c  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001309  00000000  00000000  00004cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017d2  00000000  00000000  00005fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f8  00000000  00000000  0000778c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000acf  00000000  00000000  00007d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ce4  00000000  00000000  00008853  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  0000a537  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__vector_1>
       8:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__vector_2>
       c:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <__vector_10>
      2c:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 34       	cpi	r26, 0x4C	; 76
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	ac e4       	ldi	r26, 0x4C	; 76
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3c       	cpi	r26, 0xC2	; 194
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

int main(void)
{
	char x ;
	unsigned char choice = 0;
	initpass();
      92:	0e 94 05 02 	call	0x40a	; 0x40a <initpass>

	while(1)
	{
		
		//Print Hello message on screen
		welcome_message();
      96:	0e 94 b8 03 	call	0x770	; 0x770 <welcome_message>
		
		//Press any key to go to choose list
		keyfind();
      9a:	0e 94 61 00 	call	0xc2	; 0xc2 <keyfind>
		
		do
		{
			choose_list();
      9e:	0e 94 c7 03 	call	0x78e	; 0x78e <choose_list>
			choice = keyfind();
      a2:	0e 94 61 00 	call	0xc2	; 0xc2 <keyfind>
		} while (choice != '1' && choice != '2');
      a6:	9f ec       	ldi	r25, 0xCF	; 207
      a8:	98 0f       	add	r25, r24
      aa:	92 30       	cpi	r25, 0x02	; 2
      ac:	c0 f7       	brcc	.-16     	; 0x9e <main+0xc>
		
		if(choice == '1')
      ae:	81 33       	cpi	r24, 0x31	; 49
      b0:	19 f4       	brne	.+6      	; 0xb8 <main+0x26>
		{
			//log_in();
			choose_listsecond();
      b2:	0e 94 08 05 	call	0xa10	; 0xa10 <choose_listsecond>
      b6:	ef cf       	rjmp	.-34     	; 0x96 <main+0x4>
		}
		else if(choice == '2')
      b8:	82 33       	cpi	r24, 0x32	; 50
      ba:	69 f7       	brne	.-38     	; 0x96 <main+0x4>
		{
			//change_password();
			sign_up();
      bc:	0e 94 96 02 	call	0x52c	; 0x52c <sign_up>
      c0:	ea cf       	rjmp	.-44     	; 0x96 <main+0x4>

000000c2 <keyfind>:

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;                /* set port direction as input-output */
      c2:	30 ef       	ldi	r19, 0xF0	; 240
		KEY_PRT = 0xFF;
      c4:	2f ef       	ldi	r18, 0xFF	; 255
				_delay_ms (40);				   /* 20 ms key debounce time */
				colloc = (KEY_PIN & 0x0F);
			}while(colloc == 0x0F);

			/* now check for rows */
			KEY_PRT = 0xEF;            /* check for pressed key in 1st row */
      c6:	9f ee       	ldi	r25, 0xEF	; 239
			{
				rowloc = 0;
				break;
			}

			KEY_PRT = 0xDF;			  /* check for pressed key in 2nd row */
      c8:	6f ed       	ldi	r22, 0xDF	; 223
			{
				rowloc = 1;
				break;
			}
			
			KEY_PRT = 0xBF;			  /* check for pressed key in 3rd row */
      ca:	5f eb       	ldi	r21, 0xBF	; 191
			{
				rowloc = 2;
				break;
			}

			KEY_PRT = 0x7F;			  /* check for pressed key in 4th row */
      cc:	4f e7       	ldi	r20, 0x7F	; 127

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;                /* set port direction as input-output */
      ce:	3a bb       	out	0x1a, r19	; 26
		KEY_PRT = 0xFF;
      d0:	2b bb       	out	0x1b, r18	; 27

		do
		{
			KEY_PRT &= 0x0F;           /* mask PORT for column read only */
      d2:	8b b3       	in	r24, 0x1b	; 27
      d4:	8f 70       	andi	r24, 0x0F	; 15
      d6:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
      d8:	00 00       	nop
			colloc = (KEY_PIN & 0x0F); /* read status of column */
      da:	89 b3       	in	r24, 0x19	; 25
      dc:	8f 70       	andi	r24, 0x0F	; 15
      de:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <colloc>
		}while(colloc != 0x0F);
      e2:	8f 30       	cpi	r24, 0x0F	; 15
      e4:	b1 f7       	brne	.-20     	; 0xd2 <keyfind+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      e6:	7f ef       	ldi	r23, 0xFF	; 255
      e8:	89 ef       	ldi	r24, 0xF9	; 249
      ea:	e0 e0       	ldi	r30, 0x00	; 0
      ec:	71 50       	subi	r23, 0x01	; 1
      ee:	80 40       	sbci	r24, 0x00	; 0
      f0:	e0 40       	sbci	r30, 0x00	; 0
      f2:	e1 f7       	brne	.-8      	; 0xec <keyfind+0x2a>
      f4:	00 c0       	rjmp	.+0      	; 0xf6 <keyfind+0x34>
      f6:	00 00       	nop
		do
		{
			do
			{
				_delay_ms(20);			   /* 20ms key debounce time */
				colloc = (KEY_PIN & 0x0F); /* read status of column */
      f8:	89 b3       	in	r24, 0x19	; 25
      fa:	8f 70       	andi	r24, 0x0F	; 15
      fc:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <colloc>
				}while(colloc == 0x0F);        /* check for any key press */
     100:	8f 30       	cpi	r24, 0x0F	; 15
     102:	89 f3       	breq	.-30     	; 0xe6 <keyfind+0x24>
     104:	7f ef       	ldi	r23, 0xFF	; 255
     106:	83 ef       	ldi	r24, 0xF3	; 243
     108:	e1 e0       	ldi	r30, 0x01	; 1
     10a:	71 50       	subi	r23, 0x01	; 1
     10c:	80 40       	sbci	r24, 0x00	; 0
     10e:	e0 40       	sbci	r30, 0x00	; 0
     110:	e1 f7       	brne	.-8      	; 0x10a <keyfind+0x48>
     112:	00 c0       	rjmp	.+0      	; 0x114 <keyfind+0x52>
     114:	00 00       	nop
				
				_delay_ms (40);				   /* 20 ms key debounce time */
				colloc = (KEY_PIN & 0x0F);
     116:	89 b3       	in	r24, 0x19	; 25
     118:	8f 70       	andi	r24, 0x0F	; 15
     11a:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <colloc>
			}while(colloc == 0x0F);
     11e:	8f 30       	cpi	r24, 0x0F	; 15
     120:	11 f3       	breq	.-60     	; 0xe6 <keyfind+0x24>

			/* now check for rows */
			KEY_PRT = 0xEF;            /* check for pressed key in 1st row */
     122:	9b bb       	out	0x1b, r25	; 27
			asm("NOP");
     124:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     126:	89 b3       	in	r24, 0x19	; 25
     128:	8f 70       	andi	r24, 0x0F	; 15
     12a:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <colloc>
			if(colloc != 0x0F)
     12e:	8f 30       	cpi	r24, 0x0F	; 15
     130:	19 f0       	breq	.+6      	; 0x138 <keyfind+0x76>
			{
				rowloc = 0;
     132:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <rowloc>
				break;
     136:	24 c0       	rjmp	.+72     	; 0x180 <keyfind+0xbe>
			}

			KEY_PRT = 0xDF;			  /* check for pressed key in 2nd row */
     138:	6b bb       	out	0x1b, r22	; 27
			asm("NOP");
     13a:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     13c:	89 b3       	in	r24, 0x19	; 25
     13e:	8f 70       	andi	r24, 0x0F	; 15
     140:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <colloc>
			if(colloc != 0x0F)
     144:	8f 30       	cpi	r24, 0x0F	; 15
     146:	21 f0       	breq	.+8      	; 0x150 <keyfind+0x8e>
			{
				rowloc = 1;
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <rowloc>
				break;
     14e:	18 c0       	rjmp	.+48     	; 0x180 <keyfind+0xbe>
			}
			
			KEY_PRT = 0xBF;			  /* check for pressed key in 3rd row */
     150:	5b bb       	out	0x1b, r21	; 27
			asm("NOP");
     152:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     154:	89 b3       	in	r24, 0x19	; 25
     156:	8f 70       	andi	r24, 0x0F	; 15
     158:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <colloc>
			if(colloc != 0x0F)
     15c:	8f 30       	cpi	r24, 0x0F	; 15
     15e:	21 f0       	breq	.+8      	; 0x168 <keyfind+0xa6>
			{
				rowloc = 2;
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <rowloc>
				break;
     166:	0c c0       	rjmp	.+24     	; 0x180 <keyfind+0xbe>
			}

			KEY_PRT = 0x7F;			  /* check for pressed key in 4th row */
     168:	4b bb       	out	0x1b, r20	; 27
			asm("NOP");
     16a:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     16c:	89 b3       	in	r24, 0x19	; 25
     16e:	8f 70       	andi	r24, 0x0F	; 15
     170:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <colloc>
			if(colloc != 0x0F)
     174:	8f 30       	cpi	r24, 0x0F	; 15
     176:	09 f4       	brne	.+2      	; 0x17a <keyfind+0xb8>
     178:	aa cf       	rjmp	.-172    	; 0xce <keyfind+0xc>
			{
				rowloc = 3;
     17a:	83 e0       	ldi	r24, 0x03	; 3
     17c:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <rowloc>
				break;
			}
		}

		if(colloc == 0x0E)
     180:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <colloc>
     184:	8e 30       	cpi	r24, 0x0E	; 14
     186:	59 f4       	brne	.+22     	; 0x19e <keyfind+0xdc>
		return(keypad[rowloc][0]);
     188:	e0 91 bb 02 	lds	r30, 0x02BB	; 0x8002bb <rowloc>
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	ee 0f       	add	r30, r30
     190:	ff 1f       	adc	r31, r31
     192:	ee 0f       	add	r30, r30
     194:	ff 1f       	adc	r31, r31
     196:	e0 5a       	subi	r30, 0xA0	; 160
     198:	ff 4f       	sbci	r31, 0xFF	; 255
     19a:	80 81       	ld	r24, Z
     19c:	08 95       	ret
		else if(colloc == 0x0D)
     19e:	8d 30       	cpi	r24, 0x0D	; 13
     1a0:	59 f4       	brne	.+22     	; 0x1b8 <keyfind+0xf6>
		return(keypad[rowloc][1]);
     1a2:	e0 91 bb 02 	lds	r30, 0x02BB	; 0x8002bb <rowloc>
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	ee 0f       	add	r30, r30
     1aa:	ff 1f       	adc	r31, r31
     1ac:	ee 0f       	add	r30, r30
     1ae:	ff 1f       	adc	r31, r31
     1b0:	e0 5a       	subi	r30, 0xA0	; 160
     1b2:	ff 4f       	sbci	r31, 0xFF	; 255
     1b4:	81 81       	ldd	r24, Z+1	; 0x01
     1b6:	08 95       	ret
		else if(colloc == 0x0B)
     1b8:	8b 30       	cpi	r24, 0x0B	; 11
     1ba:	59 f4       	brne	.+22     	; 0x1d2 <keyfind+0x110>
		return(keypad[rowloc][2]);
     1bc:	e0 91 bb 02 	lds	r30, 0x02BB	; 0x8002bb <rowloc>
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	ee 0f       	add	r30, r30
     1c4:	ff 1f       	adc	r31, r31
     1c6:	ee 0f       	add	r30, r30
     1c8:	ff 1f       	adc	r31, r31
     1ca:	e0 5a       	subi	r30, 0xA0	; 160
     1cc:	ff 4f       	sbci	r31, 0xFF	; 255
     1ce:	82 81       	ldd	r24, Z+2	; 0x02
     1d0:	08 95       	ret
		else
		return(keypad[rowloc][3]);
     1d2:	e0 91 bb 02 	lds	r30, 0x02BB	; 0x8002bb <rowloc>
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	ee 0f       	add	r30, r30
     1da:	ff 1f       	adc	r31, r31
     1dc:	ee 0f       	add	r30, r30
     1de:	ff 1f       	adc	r31, r31
     1e0:	e0 5a       	subi	r30, 0xA0	; 160
     1e2:	ff 4f       	sbci	r31, 0xFF	; 255
     1e4:	83 81       	ldd	r24, Z+3	; 0x03
	}
     1e6:	08 95       	ret

000001e8 <Send_instruction>:
	}
	
	void Send_instruction(uint8_t instruction)
	{
		/* RW, RS Should be 0 when Writing instructions to LCD */
		CLEARBIT(LCD_Control_reg_OP,RS);
     1e8:	a8 98       	cbi	0x15, 0	; 21
		CLEARBIT(LCD_Control_reg_OP,RW);
     1ea:	a9 98       	cbi	0x15, 1	; 21
     1ec:	ef e9       	ldi	r30, 0x9F	; 159
     1ee:	ff e0       	ldi	r31, 0x0F	; 15
     1f0:	31 97       	sbiw	r30, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <Send_instruction+0x8>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <Send_instruction+0xe>
     1f6:	00 00       	nop
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		
		/* Enable LCD E=1 */
		SETBIT(LCD_Control_reg_OP,E);
     1f8:	aa 9a       	sbi	0x15, 2	; 21
     1fa:	ef e9       	ldi	r30, 0x9F	; 159
     1fc:	ff e0       	ldi	r31, 0x0F	; 15
     1fe:	31 97       	sbiw	r30, 0x01	; 1
     200:	f1 f7       	brne	.-4      	; 0x1fe <Send_instruction+0x16>
     202:	00 c0       	rjmp	.+0      	; 0x204 <Send_instruction+0x1c>
     204:	00 00       	nop
			_delay_ms(1); 
		#else 
			
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
     206:	95 b3       	in	r25, 0x15	; 21
     208:	9f 70       	andi	r25, 0x0F	; 15
     20a:	95 bb       	out	0x15, r25	; 21
				LCD_Data_Reg_OP |= (instruction & 0xF0);
     20c:	95 b3       	in	r25, 0x15	; 21
     20e:	28 2f       	mov	r18, r24
     210:	20 7f       	andi	r18, 0xF0	; 240
     212:	92 2b       	or	r25, r18
     214:	95 bb       	out	0x15, r25	; 21
     216:	ef e9       	ldi	r30, 0x9F	; 159
     218:	ff e0       	ldi	r31, 0x0F	; 15
     21a:	31 97       	sbiw	r30, 0x01	; 1
     21c:	f1 f7       	brne	.-4      	; 0x21a <Send_instruction+0x32>
     21e:	00 c0       	rjmp	.+0      	; 0x220 <Send_instruction+0x38>
     220:	00 00       	nop
			#endif
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
		
			/* disable LCD E=0 */
			CLEARBIT(LCD_Control_reg_OP,E);
     222:	aa 98       	cbi	0x15, 2	; 21
     224:	ef e9       	ldi	r30, 0x9F	; 159
     226:	ff e0       	ldi	r31, 0x0F	; 15
     228:	31 97       	sbiw	r30, 0x01	; 1
     22a:	f1 f7       	brne	.-4      	; 0x228 <Send_instruction+0x40>
     22c:	00 c0       	rjmp	.+0      	; 0x22e <Send_instruction+0x46>
     22e:	00 00       	nop
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			
			/* Enable LCD E=1 */
			SETBIT(LCD_Control_reg_OP,E);
     230:	aa 9a       	sbi	0x15, 2	; 21
     232:	ef e9       	ldi	r30, 0x9F	; 159
     234:	ff e0       	ldi	r31, 0x0F	; 15
     236:	31 97       	sbiw	r30, 0x01	; 1
     238:	f1 f7       	brne	.-4      	; 0x236 <Send_instruction+0x4e>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <Send_instruction+0x54>
     23c:	00 00       	nop
			/* delay for processing PW min 450ns */
			_delay_ms(1);
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
     23e:	95 b3       	in	r25, 0x15	; 21
     240:	9f 70       	andi	r25, 0x0F	; 15
     242:	95 bb       	out	0x15, r25	; 21
				LCD_Data_Reg_OP |= ((instruction <<4) );
     244:	25 b3       	in	r18, 0x15	; 21
     246:	f0 e1       	ldi	r31, 0x10	; 16
     248:	8f 9f       	mul	r24, r31
     24a:	c0 01       	movw	r24, r0
     24c:	11 24       	eor	r1, r1
     24e:	82 2b       	or	r24, r18
     250:	85 bb       	out	0x15, r24	; 21
     252:	8f e9       	ldi	r24, 0x9F	; 159
     254:	9f e0       	ldi	r25, 0x0F	; 15
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	f1 f7       	brne	.-4      	; 0x256 <Send_instruction+0x6e>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <Send_instruction+0x74>
     25c:	00 00       	nop
				LCD_Data_Reg_OP |= ((instruction) & 0x0f);
			#endif
				/* Data set-up time delay  Tdsw = 195 ns */
				_delay_ms(1);
				/* disable LCD E=0 */
				CLEARBIT(LCD_Control_reg_OP,E);
     25e:	aa 98       	cbi	0x15, 2	; 21
     260:	ef e9       	ldi	r30, 0x9F	; 159
     262:	ff e0       	ldi	r31, 0x0F	; 15
     264:	31 97       	sbiw	r30, 0x01	; 1
     266:	f1 f7       	brne	.-4      	; 0x264 <Send_instruction+0x7c>
     268:	00 c0       	rjmp	.+0      	; 0x26a <Send_instruction+0x82>
     26a:	00 00       	nop
     26c:	08 95       	ret

0000026e <LCD_init>:
	#include "LCD.h"
	#include <stdlib.h>
	void LCD_init(void)
	{
		/* Set The Control Pins Direction to OUtput */
		LCD_Control_reg_DIR |=(1<<E) | (1<<RW) | (1<<RS);
     26e:	84 b3       	in	r24, 0x14	; 20
     270:	87 60       	ori	r24, 0x07	; 7
     272:	84 bb       	out	0x14, r24	; 20
			LCD_Data_Reg_DIR =0xFF;
		#else
			
			#if Upper_Data_port
				/* Set The Direction of The Upper Pins to OP*/
				LCD_Data_Reg_DIR |=(0xF0);
     274:	84 b3       	in	r24, 0x14	; 20
     276:	80 6f       	ori	r24, 0xF0	; 240
     278:	84 bb       	out	0x14, r24	; 20
			#else
				/* Set The Direction of The LOWER Pins to OP*/
				LCD_Data_Reg_DIR|=(0x0F);
			#endif
			Send_instruction(Return_Home);
     27a:	82 e0       	ldi	r24, 0x02	; 2
     27c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Send_instruction>
		#endif
		
		Send_instruction(Data_Set);
     280:	88 e2       	ldi	r24, 0x28	; 40
     282:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Send_instruction>
		Send_instruction(Display_on);
     286:	8f e0       	ldi	r24, 0x0F	; 15
     288:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Send_instruction>
		Send_instruction(Clear_display);
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Send_instruction>
     292:	08 95       	ret

00000294 <LCD_DisplayChar>:
	
	
	void LCD_DisplayChar(uint8_t Data)
	{
		/* RW  Should be 0  and RS should be 1 when Writing Data to LCD */
		SETBIT(LCD_Control_reg_OP,RS);
     294:	a8 9a       	sbi	0x15, 0	; 21
		CLEARBIT(LCD_Control_reg_OP,RW);
     296:	a9 98       	cbi	0x15, 1	; 21
     298:	ef e9       	ldi	r30, 0x9F	; 159
     29a:	ff e0       	ldi	r31, 0x0F	; 15
     29c:	31 97       	sbiw	r30, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <LCD_DisplayChar+0x8>
     2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <LCD_DisplayChar+0xe>
     2a2:	00 00       	nop
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		/* Enable LCD E=1 */
		SETBIT(LCD_Control_reg_OP,E);
     2a4:	aa 9a       	sbi	0x15, 2	; 21
     2a6:	ef e9       	ldi	r30, 0x9F	; 159
     2a8:	ff e0       	ldi	r31, 0x0F	; 15
     2aa:	31 97       	sbiw	r30, 0x01	; 1
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCD_DisplayChar+0x16>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <LCD_DisplayChar+0x1c>
     2b0:	00 00       	nop
		#if eight_bitdata
			LCD_Data_Reg_OP=Data;
		#else
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
     2b2:	95 b3       	in	r25, 0x15	; 21
     2b4:	9f 70       	andi	r25, 0x0F	; 15
     2b6:	95 bb       	out	0x15, r25	; 21
				/* Send MSB (4-bits )*/
				LCD_Data_Reg_OP |= (Data & 0xF0);
     2b8:	95 b3       	in	r25, 0x15	; 21
     2ba:	28 2f       	mov	r18, r24
     2bc:	20 7f       	andi	r18, 0xF0	; 240
     2be:	92 2b       	or	r25, r18
     2c0:	95 bb       	out	0x15, r25	; 21
     2c2:	ef e9       	ldi	r30, 0x9F	; 159
     2c4:	ff e0       	ldi	r31, 0x0F	; 15
     2c6:	31 97       	sbiw	r30, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <LCD_DisplayChar+0x32>
     2ca:	00 c0       	rjmp	.+0      	; 0x2cc <LCD_DisplayChar+0x38>
     2cc:	00 00       	nop
			#endif
				
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
			/* disable LCD E=0 */
			CLEARBIT(LCD_Control_reg_OP,E);
     2ce:	aa 98       	cbi	0x15, 2	; 21
     2d0:	ef e9       	ldi	r30, 0x9F	; 159
     2d2:	ff e0       	ldi	r31, 0x0F	; 15
     2d4:	31 97       	sbiw	r30, 0x01	; 1
     2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_DisplayChar+0x40>
     2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_DisplayChar+0x46>
     2da:	00 00       	nop
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			/* Enable LCD E=1 */
			SETBIT(LCD_Control_reg_OP,E); 
     2dc:	aa 9a       	sbi	0x15, 2	; 21
				
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
     2de:	95 b3       	in	r25, 0x15	; 21
     2e0:	9f 70       	andi	r25, 0x0F	; 15
     2e2:	95 bb       	out	0x15, r25	; 21
				LCD_Data_Reg_OP |= ((Data <<4) & 0xF0);
     2e4:	25 b3       	in	r18, 0x15	; 21
     2e6:	f0 e1       	ldi	r31, 0x10	; 16
     2e8:	8f 9f       	mul	r24, r31
     2ea:	c0 01       	movw	r24, r0
     2ec:	11 24       	eor	r1, r1
     2ee:	82 2b       	or	r24, r18
     2f0:	85 bb       	out	0x15, r24	; 21
     2f2:	8f e9       	ldi	r24, 0x9F	; 159
     2f4:	9f e0       	ldi	r25, 0x0F	; 15
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <LCD_DisplayChar+0x62>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <LCD_DisplayChar+0x68>
     2fc:	00 00       	nop
     2fe:	ef e9       	ldi	r30, 0x9F	; 159
     300:	ff e0       	ldi	r31, 0x0F	; 15
     302:	31 97       	sbiw	r30, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <LCD_DisplayChar+0x6e>
     306:	00 c0       	rjmp	.+0      	; 0x308 <LCD_DisplayChar+0x74>
     308:	00 00       	nop
			
			#endif
		/* Data set-up time delay  Tdsw = 195 ns */
		_delay_ms(1);
		/* disable LCD E=0 */
		CLEARBIT(LCD_Control_reg_OP,E);						
     30a:	aa 98       	cbi	0x15, 2	; 21
     30c:	8f e9       	ldi	r24, 0x9F	; 159
     30e:	9f e0       	ldi	r25, 0x0F	; 15
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <LCD_DisplayChar+0x7c>
     314:	00 c0       	rjmp	.+0      	; 0x316 <LCD_DisplayChar+0x82>
     316:	00 00       	nop
     318:	08 95       	ret

0000031a <LCD_Clear>:
	}
	
	void LCD_Clear(void)
	{
		/* Clear Screen */
		Send_instruction(Clear_display); 
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Send_instruction>
     320:	08 95       	ret

00000322 <LCD_DisplayString>:
	}
	
	
	void LCD_DisplayString(char * ptr)
	{
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	ec 01       	movw	r28, r24
		while(*ptr != '\0')
     328:	88 81       	ld	r24, Y
     32a:	88 23       	and	r24, r24
     32c:	31 f0       	breq	.+12     	; 0x33a <LCD_DisplayString+0x18>
     32e:	21 96       	adiw	r28, 0x01	; 1
		{
			LCD_DisplayChar(*ptr);
     330:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_DisplayChar>
	}
	
	
	void LCD_DisplayString(char * ptr)
	{
		while(*ptr != '\0')
     334:	89 91       	ld	r24, Y+
     336:	81 11       	cpse	r24, r1
     338:	fb cf       	rjmp	.-10     	; 0x330 <LCD_DisplayString+0xe>
		{
			LCD_DisplayChar(*ptr);
			ptr++;
		}
	}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <LCD_Select_RowCol>:
	}
	void LCD_Select_RowCol(uint8_t Row , uint8_t col)
	{
		uint8_t Address=0;
		
		switch(Row)
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	31 f0       	breq	.+12     	; 0x350 <LCD_Select_RowCol+0x10>
     344:	60 f0       	brcs	.+24     	; 0x35e <LCD_Select_RowCol+0x1e>
     346:	82 30       	cpi	r24, 0x02	; 2
     348:	29 f0       	breq	.+10     	; 0x354 <LCD_Select_RowCol+0x14>
     34a:	83 30       	cpi	r24, 0x03	; 3
     34c:	29 f0       	breq	.+10     	; 0x358 <LCD_Select_RowCol+0x18>
     34e:	06 c0       	rjmp	.+12     	; 0x35c <LCD_Select_RowCol+0x1c>
					/* When Writing To LCD 1st Col The Base Address is 0x00 */
						Address=col + LCD_1ST_BASE;
						break;
			case 1:
					/* When Writing To LCD 2nd Col The Base Address is 0x40 */
						Address=col + LCD_2ND_BASE;
     350:	60 5c       	subi	r22, 0xC0	; 192
						break;
     352:	05 c0       	rjmp	.+10     	; 0x35e <LCD_Select_RowCol+0x1e>
			case 2:
					/* When Writing To LCD 1st Col The Base Address is 0x10 */
						Address = col + LCD_3RD_BASE;
     354:	60 5f       	subi	r22, 0xF0	; 240
						break;
     356:	03 c0       	rjmp	.+6      	; 0x35e <LCD_Select_RowCol+0x1e>
			case 3:
					/* When Writing To LCD 1st Col The Base Address is 0x50 */
						Address=col + LCD_4TH_BASE;
     358:	60 5b       	subi	r22, 0xB0	; 176
						break;		
     35a:	01 c0       	rjmp	.+2      	; 0x35e <LCD_Select_RowCol+0x1e>
			ptr++;
		}
	}
	void LCD_Select_RowCol(uint8_t Row , uint8_t col)
	{
		uint8_t Address=0;
     35c:	60 e0       	ldi	r22, 0x00	; 0
						break;		
			default:
						break;
		}
		
		Send_instruction(DDRAM_CONST|Address);
     35e:	86 2f       	mov	r24, r22
     360:	80 68       	ori	r24, 0x80	; 128
     362:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Send_instruction>
     366:	08 95       	ret

00000368 <LCD_DisplayStringrowcol>:
			LCD_DisplayChar(*ptr);
			ptr++;
		}
	}
	void LCD_DisplayStringrowcol(char * ptr ,uint8_t Row , uint8_t col)
	{
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	ec 01       	movw	r28, r24
     36e:	86 2f       	mov	r24, r22
			LCD_Select_RowCol(Row , col);
     370:	64 2f       	mov	r22, r20
     372:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Select_RowCol>

		while(*ptr != '\0')
     376:	88 81       	ld	r24, Y
     378:	88 23       	and	r24, r24
     37a:	31 f0       	breq	.+12     	; 0x388 <LCD_DisplayStringrowcol+0x20>
     37c:	21 96       	adiw	r28, 0x01	; 1
		{
			LCD_DisplayChar(*ptr);
     37e:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_DisplayChar>
	}
	void LCD_DisplayStringrowcol(char * ptr ,uint8_t Row , uint8_t col)
	{
			LCD_Select_RowCol(Row , col);

		while(*ptr != '\0')
     382:	89 91       	ld	r24, Y+
     384:	81 11       	cpse	r24, r1
     386:	fb cf       	rjmp	.-10     	; 0x37e <LCD_DisplayStringrowcol+0x16>
		{
			LCD_DisplayChar(*ptr);
			ptr++;
		}
	}
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <open_the_door>:
 */ 
 #include <motordoor.h>

 void open_the_door (void)
 {
		 GPIO_OutputHandle(GPIOD,PIN3,HIGH);
     38e:	41 e0       	ldi	r20, 0x01	; 1
     390:	63 e0       	ldi	r22, 0x03	; 3
     392:	80 e3       	ldi	r24, 0x30	; 48
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 71 05 	call	0xae2	; 0xae2 <GPIO_OutputHandle>
	 	 GPIO_OutputHandle(GPIOD,PIN4,LOW);
     39a:	40 e0       	ldi	r20, 0x00	; 0
     39c:	64 e0       	ldi	r22, 0x04	; 4
     39e:	80 e3       	ldi	r24, 0x30	; 48
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 71 05 	call	0xae2	; 0xae2 <GPIO_OutputHandle>

 LCD_Clear();
     3a6:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Clear>
 LCD_DisplayStringrowcol(" The door is opened",0,6);
     3aa:	46 e0       	ldi	r20, 0x06	; 6
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	80 e7       	ldi	r24, 0x70	; 112
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
     3b6:	2f ef       	ldi	r18, 0xFF	; 255
     3b8:	87 ea       	ldi	r24, 0xA7	; 167
     3ba:	91 e6       	ldi	r25, 0x61	; 97
     3bc:	21 50       	subi	r18, 0x01	; 1
     3be:	80 40       	sbci	r24, 0x00	; 0
     3c0:	90 40       	sbci	r25, 0x00	; 0
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <open_the_door+0x2e>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <open_the_door+0x38>
     3c6:	00 00       	nop
 _delay_ms(2000);
 eeprom_write(NUM_OF_TRIALS_ADDR,0);
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	89 e1       	ldi	r24, 0x19	; 25
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <eeprom_write>
  GPIO_OutputHandle(GPIOD,PIN3,LOW);
     3d2:	40 e0       	ldi	r20, 0x00	; 0
     3d4:	63 e0       	ldi	r22, 0x03	; 3
     3d6:	80 e3       	ldi	r24, 0x30	; 48
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 71 05 	call	0xae2	; 0xae2 <GPIO_OutputHandle>
  GPIO_OutputHandle(GPIOD,PIN4,HIGH);
     3de:	41 e0       	ldi	r20, 0x01	; 1
     3e0:	64 e0       	ldi	r22, 0x04	; 4
     3e2:	80 e3       	ldi	r24, 0x30	; 48
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 71 05 	call	0xae2	; 0xae2 <GPIO_OutputHandle>
     3ea:	2f ef       	ldi	r18, 0xFF	; 255
     3ec:	87 ea       	ldi	r24, 0xA7	; 167
     3ee:	91 e6       	ldi	r25, 0x61	; 97
     3f0:	21 50       	subi	r18, 0x01	; 1
     3f2:	80 40       	sbci	r24, 0x00	; 0
     3f4:	90 40       	sbci	r25, 0x00	; 0
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <open_the_door+0x62>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <open_the_door+0x6c>
     3fa:	00 00       	nop
   _delay_ms(2000);
   GPIO_OutputHandle(GPIOD,PIN4,LOW);
     3fc:	40 e0       	ldi	r20, 0x00	; 0
     3fe:	64 e0       	ldi	r22, 0x04	; 4
     400:	80 e3       	ldi	r24, 0x30	; 48
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 71 05 	call	0xae2	; 0xae2 <GPIO_OutputHandle>
     408:	08 95       	ret

0000040a <initpass>:
	 }
 }

 void int2_Event(void)
 {
	 close_the_door();
     40a:	42 e0       	ldi	r20, 0x02	; 2
     40c:	63 e0       	ldi	r22, 0x03	; 3
     40e:	80 e3       	ldi	r24, 0x30	; 48
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 29 05 	call	0xa52	; 0xa52 <GPIO_DirectionSet>
     416:	42 e0       	ldi	r20, 0x02	; 2
     418:	64 e0       	ldi	r22, 0x04	; 4
     41a:	80 e3       	ldi	r24, 0x30	; 48
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	0e 94 29 05 	call	0xa52	; 0xa52 <GPIO_DirectionSet>
     422:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_init>
     426:	41 e0       	ldi	r20, 0x01	; 1
     428:	62 e0       	ldi	r22, 0x02	; 2
     42a:	86 e3       	ldi	r24, 0x36	; 54
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 29 05 	call	0xa52	; 0xa52 <GPIO_DirectionSet>
     432:	61 e0       	ldi	r22, 0x01	; 1
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	0e 94 21 06 	call	0xc42	; 0xc42 <Ext_InterruptEnable>
     43a:	8f b7       	in	r24, 0x3f	; 63
     43c:	80 68       	ori	r24, 0x80	; 128
     43e:	8f bf       	out	0x3f, r24	; 63
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	89 e1       	ldi	r24, 0x19	; 25
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <eeprom_write>
     44a:	08 95       	ret

0000044c <compare>:
     44c:	42 13       	cpse	r20, r18
     44e:	1b c0       	rjmp	.+54     	; 0x486 <compare+0x3a>
     450:	44 23       	and	r20, r20
     452:	d9 f0       	breq	.+54     	; 0x48a <compare+0x3e>
     454:	fc 01       	movw	r30, r24
     456:	30 81       	ld	r19, Z
     458:	fb 01       	movw	r30, r22
     45a:	20 81       	ld	r18, Z
     45c:	32 13       	cpse	r19, r18
     45e:	17 c0       	rjmp	.+46     	; 0x48e <compare+0x42>
     460:	dc 01       	movw	r26, r24
     462:	11 96       	adiw	r26, 0x01	; 1
     464:	31 96       	adiw	r30, 0x01	; 1
     466:	41 50       	subi	r20, 0x01	; 1
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	4f 5f       	subi	r20, 0xFF	; 255
     46c:	5f 4f       	sbci	r21, 0xFF	; 255
     46e:	84 0f       	add	r24, r20
     470:	95 1f       	adc	r25, r21
     472:	04 c0       	rjmp	.+8      	; 0x47c <compare+0x30>
     474:	3d 91       	ld	r19, X+
     476:	21 91       	ld	r18, Z+
     478:	32 13       	cpse	r19, r18
     47a:	0b c0       	rjmp	.+22     	; 0x492 <compare+0x46>
     47c:	a8 17       	cp	r26, r24
     47e:	b9 07       	cpc	r27, r25
     480:	c9 f7       	brne	.-14     	; 0x474 <compare+0x28>
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	08 95       	ret
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	08 95       	ret
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	08 95       	ret
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	08 95       	ret
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	08 95       	ret

00000496 <get_password>:
     496:	af 92       	push	r10
     498:	bf 92       	push	r11
     49a:	cf 92       	push	r12
     49c:	df 92       	push	r13
     49e:	ef 92       	push	r14
     4a0:	ff 92       	push	r15
     4a2:	0f 93       	push	r16
     4a4:	1f 93       	push	r17
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	6c 01       	movw	r12, r24
     4ac:	61 e0       	ldi	r22, 0x01	; 1
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Select_RowCol>
     4b4:	00 e0       	ldi	r16, 0x00	; 0
     4b6:	10 e0       	ldi	r17, 0x00	; 0
     4b8:	c0 e0       	ldi	r28, 0x00	; 0
     4ba:	d0 e0       	ldi	r29, 0x00	; 0
     4bc:	a1 2c       	mov	r10, r1
     4be:	b1 2c       	mov	r11, r1
     4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <get_password+0x2e>
     4c2:	e7 01       	movw	r28, r14
     4c4:	0e 94 61 00 	call	0xc2	; 0xc2 <keyfind>
     4c8:	8b 32       	cpi	r24, 0x2B	; 43
     4ca:	11 f1       	breq	.+68     	; 0x510 <get_password+0x7a>
     4cc:	8a 32       	cpi	r24, 0x2A	; 42
     4ce:	19 f4       	brne	.+6      	; 0x4d6 <get_password+0x40>
     4d0:	1c 16       	cp	r1, r28
     4d2:	1d 06       	cpc	r1, r29
     4d4:	d4 f4       	brge	.+52     	; 0x50a <get_password+0x74>
     4d6:	ca 30       	cpi	r28, 0x0A	; 10
     4d8:	d1 05       	cpc	r29, r1
     4da:	a1 f3       	breq	.-24     	; 0x4c4 <get_password+0x2e>
     4dc:	7e 01       	movw	r14, r28
     4de:	9f ef       	ldi	r25, 0xFF	; 255
     4e0:	e9 1a       	sub	r14, r25
     4e2:	f9 0a       	sbc	r15, r25
     4e4:	cc 0d       	add	r28, r12
     4e6:	dd 1d       	adc	r29, r13
     4e8:	88 83       	st	Y, r24
     4ea:	60 2f       	mov	r22, r16
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Select_RowCol>
     4f2:	87 e9       	ldi	r24, 0x97	; 151
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 91 01 	call	0x322	; 0x322 <LCD_DisplayString>
     4fa:	0f 5f       	subi	r16, 0xFF	; 255
     4fc:	1f 4f       	sbci	r17, 0xFF	; 255
     4fe:	8b e0       	ldi	r24, 0x0B	; 11
     500:	e8 16       	cp	r14, r24
     502:	f1 04       	cpc	r15, r1
     504:	f4 f2       	brlt	.-68     	; 0x4c2 <get_password+0x2c>
     506:	e7 01       	movw	r28, r14
     508:	03 c0       	rjmp	.+6      	; 0x510 <get_password+0x7a>
     50a:	ca 2d       	mov	r28, r10
     50c:	db 2d       	mov	r29, r11
     50e:	da cf       	rjmp	.-76     	; 0x4c4 <get_password+0x2e>
     510:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Clear>
     514:	8c 2f       	mov	r24, r28
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	ff 90       	pop	r15
     520:	ef 90       	pop	r14
     522:	df 90       	pop	r13
     524:	cf 90       	pop	r12
     526:	bf 90       	pop	r11
     528:	af 90       	pop	r10
     52a:	08 95       	ret

0000052c <sign_up>:
     52c:	cf 92       	push	r12
     52e:	df 92       	push	r13
     530:	ef 92       	push	r14
     532:	ff 92       	push	r15
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	66 97       	sbiw	r28, 0x16	; 22
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	f8 94       	cli
     546:	de bf       	out	0x3e, r29	; 62
     548:	0f be       	out	0x3f, r0	; 63
     54a:	cd bf       	out	0x3d, r28	; 61
     54c:	8b e0       	ldi	r24, 0x0B	; 11
     54e:	8e 01       	movw	r16, r28
     550:	0f 5f       	subi	r16, 0xFF	; 255
     552:	1f 4f       	sbci	r17, 0xFF	; 255
     554:	f8 01       	movw	r30, r16
     556:	28 2f       	mov	r18, r24
     558:	11 92       	st	Z+, r1
     55a:	2a 95       	dec	r18
     55c:	e9 f7       	brne	.-6      	; 0x558 <sign_up+0x2c>
     55e:	7e 01       	movw	r14, r28
     560:	9c e0       	ldi	r25, 0x0C	; 12
     562:	e9 0e       	add	r14, r25
     564:	f1 1c       	adc	r15, r1
     566:	f7 01       	movw	r30, r14
     568:	11 92       	st	Z+, r1
     56a:	8a 95       	dec	r24
     56c:	e9 f7       	brne	.-6      	; 0x568 <sign_up+0x3c>
     56e:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Clear>
     572:	61 e0       	ldi	r22, 0x01	; 1
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Select_RowCol>
     57a:	89 e9       	ldi	r24, 0x99	; 153
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 91 01 	call	0x322	; 0x322 <LCD_DisplayString>
     582:	61 e0       	ldi	r22, 0x01	; 1
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Select_RowCol>
     58a:	c8 01       	movw	r24, r16
     58c:	0e 94 4b 02 	call	0x496	; 0x496 <get_password>
     590:	c8 2e       	mov	r12, r24
     592:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Clear>
     596:	61 e0       	ldi	r22, 0x01	; 1
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Select_RowCol>
     59e:	8d ea       	ldi	r24, 0xAD	; 173
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 91 01 	call	0x322	; 0x322 <LCD_DisplayString>
     5a6:	62 e0       	ldi	r22, 0x02	; 2
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Select_RowCol>
     5ae:	c7 01       	movw	r24, r14
     5b0:	0e 94 4b 02 	call	0x496	; 0x496 <get_password>
     5b4:	28 2f       	mov	r18, r24
     5b6:	4c 2d       	mov	r20, r12
     5b8:	b7 01       	movw	r22, r14
     5ba:	c8 01       	movw	r24, r16
     5bc:	0e 94 26 02 	call	0x44c	; 0x44c <compare>
     5c0:	88 23       	and	r24, r24
     5c2:	79 f1       	breq	.+94     	; 0x622 <sign_up+0xf6>
     5c4:	6c 2d       	mov	r22, r12
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <eeprom_write>
     5ce:	cc 20       	and	r12, r12
     5d0:	99 f0       	breq	.+38     	; 0x5f8 <sign_up+0xcc>
     5d2:	78 01       	movw	r14, r16
     5d4:	ca 94       	dec	r12
     5d6:	d1 2c       	mov	r13, r1
     5d8:	93 e0       	ldi	r25, 0x03	; 3
     5da:	c9 0e       	add	r12, r25
     5dc:	d1 1c       	adc	r13, r1
     5de:	02 e0       	ldi	r16, 0x02	; 2
     5e0:	10 e0       	ldi	r17, 0x00	; 0
     5e2:	f7 01       	movw	r30, r14
     5e4:	61 91       	ld	r22, Z+
     5e6:	7f 01       	movw	r14, r30
     5e8:	c8 01       	movw	r24, r16
     5ea:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <eeprom_write>
     5ee:	0f 5f       	subi	r16, 0xFF	; 255
     5f0:	1f 4f       	sbci	r17, 0xFF	; 255
     5f2:	0c 15       	cp	r16, r12
     5f4:	1d 05       	cpc	r17, r13
     5f6:	a9 f7       	brne	.-22     	; 0x5e2 <sign_up+0xb6>
     5f8:	8f b7       	in	r24, 0x3f	; 63
     5fa:	80 68       	ori	r24, 0x80	; 128
     5fc:	8f bf       	out	0x3f, r24	; 63
     5fe:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Clear>
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	61 e0       	ldi	r22, 0x01	; 1
     606:	81 ec       	ldi	r24, 0xC1	; 193
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
     60e:	ff ef       	ldi	r31, 0xFF	; 255
     610:	23 ed       	ldi	r18, 0xD3	; 211
     612:	80 e3       	ldi	r24, 0x30	; 48
     614:	f1 50       	subi	r31, 0x01	; 1
     616:	20 40       	sbci	r18, 0x00	; 0
     618:	80 40       	sbci	r24, 0x00	; 0
     61a:	e1 f7       	brne	.-8      	; 0x614 <sign_up+0xe8>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <sign_up+0xf2>
     61e:	00 00       	nop
     620:	19 c0       	rjmp	.+50     	; 0x654 <sign_up+0x128>
     622:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Clear>
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	60 e0       	ldi	r22, 0x00	; 0
     62a:	88 ed       	ldi	r24, 0xD8	; 216
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	61 e0       	ldi	r22, 0x01	; 1
     636:	89 ee       	ldi	r24, 0xE9	; 233
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
     63e:	9f ef       	ldi	r25, 0xFF	; 255
     640:	e3 ed       	ldi	r30, 0xD3	; 211
     642:	f0 e3       	ldi	r31, 0x30	; 48
     644:	91 50       	subi	r25, 0x01	; 1
     646:	e0 40       	sbci	r30, 0x00	; 0
     648:	f0 40       	sbci	r31, 0x00	; 0
     64a:	e1 f7       	brne	.-8      	; 0x644 <sign_up+0x118>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <sign_up+0x122>
     64e:	00 00       	nop
     650:	0e 94 96 02 	call	0x52c	; 0x52c <sign_up>
     654:	66 96       	adiw	r28, 0x16	; 22
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	f8 94       	cli
     65a:	de bf       	out	0x3e, r29	; 62
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	cd bf       	out	0x3d, r28	; 61
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	df 90       	pop	r13
     66e:	cf 90       	pop	r12
     670:	08 95       	ret

00000672 <check_password>:
     672:	ff 92       	push	r15
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	c8 2f       	mov	r28, r24
     67e:	f6 2e       	mov	r15, r22
     680:	d7 2f       	mov	r29, r23
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	0e 94 f7 06 	call	0xdee	; 0xdee <eeprom_read>
     688:	8c 13       	cpse	r24, r28
     68a:	29 c0       	rjmp	.+82     	; 0x6de <check_password+0x6c>
     68c:	88 23       	and	r24, r24
     68e:	49 f1       	breq	.+82     	; 0x6e2 <check_password+0x70>
     690:	0f 2d       	mov	r16, r15
     692:	1d 2f       	mov	r17, r29
     694:	68 94       	set
     696:	ff 24       	eor	r15, r15
     698:	f1 f8       	bld	r15, 1
     69a:	f8 0e       	add	r15, r24
     69c:	c2 e0       	ldi	r28, 0x02	; 2
     69e:	f8 01       	movw	r30, r16
     6a0:	d1 91       	ld	r29, Z+
     6a2:	8f 01       	movw	r16, r30
     6a4:	8c 2f       	mov	r24, r28
     6a6:	0e 94 f7 06 	call	0xdee	; 0xdee <eeprom_read>
     6aa:	d8 17       	cp	r29, r24
     6ac:	99 f0       	breq	.+38     	; 0x6d4 <check_password+0x62>
     6ae:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Clear>
     6b2:	46 e0       	ldi	r20, 0x06	; 6
     6b4:	61 e0       	ldi	r22, 0x01	; 1
     6b6:	8b ef       	ldi	r24, 0xFB	; 251
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
     6be:	ff ef       	ldi	r31, 0xFF	; 255
     6c0:	23 ed       	ldi	r18, 0xD3	; 211
     6c2:	80 e3       	ldi	r24, 0x30	; 48
     6c4:	f1 50       	subi	r31, 0x01	; 1
     6c6:	20 40       	sbci	r18, 0x00	; 0
     6c8:	80 40       	sbci	r24, 0x00	; 0
     6ca:	e1 f7       	brne	.-8      	; 0x6c4 <check_password+0x52>
     6cc:	00 c0       	rjmp	.+0      	; 0x6ce <check_password+0x5c>
     6ce:	00 00       	nop
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <check_password+0x72>
     6d4:	cf 5f       	subi	r28, 0xFF	; 255
     6d6:	cf 11       	cpse	r28, r15
     6d8:	e2 cf       	rjmp	.-60     	; 0x69e <check_password+0x2c>
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <check_password+0x72>
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <check_password+0x72>
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	ff 90       	pop	r15
     6ee:	08 95       	ret

000006f0 <change_password>:
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
     6fc:	2a 97       	sbiw	r28, 0x0a	; 10
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
     708:	8e 01       	movw	r16, r28
     70a:	0f 5f       	subi	r16, 0xFF	; 255
     70c:	1f 4f       	sbci	r17, 0xFF	; 255
     70e:	8a e0       	ldi	r24, 0x0A	; 10
     710:	f8 01       	movw	r30, r16
     712:	11 92       	st	Z+, r1
     714:	8a 95       	dec	r24
     716:	e9 f7       	brne	.-6      	; 0x712 <change_password+0x22>
     718:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Clear>
     71c:	41 e0       	ldi	r20, 0x01	; 1
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
     728:	62 e0       	ldi	r22, 0x02	; 2
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Select_RowCol>
     730:	c8 01       	movw	r24, r16
     732:	0e 94 4b 02 	call	0x496	; 0x496 <get_password>
     736:	b8 01       	movw	r22, r16
     738:	0e 94 39 03 	call	0x672	; 0x672 <check_password>
     73c:	88 23       	and	r24, r24
     73e:	19 f0       	breq	.+6      	; 0x746 <change_password+0x56>
     740:	0e 94 96 02 	call	0x52c	; 0x52c <sign_up>
     744:	0a c0       	rjmp	.+20     	; 0x75a <change_password+0x6a>
     746:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Clear>
     74a:	41 e0       	ldi	r20, 0x01	; 1
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	85 e1       	ldi	r24, 0x15	; 21
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
     756:	0e 94 78 03 	call	0x6f0	; 0x6f0 <change_password>
     75a:	2a 96       	adiw	r28, 0x0a	; 10
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	08 95       	ret

00000770 <welcome_message>:
 }
 
 void welcome_message (void)
 {
	 LCD_Clear();
     770:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Clear>
	 LCD_DisplayStringrowcol("Password-lock door",0,0);
     774:	40 e0       	ldi	r20, 0x00	; 0
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	8d e2       	ldi	r24, 0x2D	; 45
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
	 LCD_DisplayStringrowcol("      Welcome!",1,0);
     780:	40 e0       	ldi	r20, 0x00	; 0
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	80 e4       	ldi	r24, 0x40	; 64
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
     78c:	08 95       	ret

0000078e <choose_list>:
 }

 void choose_list (void)
 {
	 LCD_Clear();
     78e:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Clear>
	 LCD_DisplayStringrowcol("(1)Log-in",0,0);
     792:	40 e0       	ldi	r20, 0x00	; 0
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	8f e4       	ldi	r24, 0x4F	; 79
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
	 LCD_DisplayStringrowcol("(2)sign-up",1,0);
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	61 e0       	ldi	r22, 0x01	; 1
     7a2:	89 e5       	ldi	r24, 0x59	; 89
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
     7aa:	08 95       	ret

000007ac <get_puk_code>:
 /*************************************************************************************************************/

 //This function checks if the user enters the puk code correctly or not

 unsigned char get_puk_code(void)
 {
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	2a 97       	sbiw	r28, 0x0a	; 10
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
	 unsigned char i = 0;				//Just a counter variable
	 unsigned char puk_code[10] = {0};
     7c8:	8e 01       	movw	r16, r28
     7ca:	0f 5f       	subi	r16, 0xFF	; 255
     7cc:	1f 4f       	sbci	r17, 0xFF	; 255
     7ce:	8a e0       	ldi	r24, 0x0A	; 10
     7d0:	f8 01       	movw	r30, r16
     7d2:	11 92       	st	Z+, r1
     7d4:	8a 95       	dec	r24
     7d6:	e9 f7       	brne	.-6      	; 0x7d2 <get_puk_code+0x26>
	 unsigned char length = 0;
	 
	 LCD_Clear();
     7d8:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Clear>
	 LCD_DisplayStringrowcol(" The door is closed ",0,0);
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	84 e6       	ldi	r24, 0x64	; 100
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
	 LCD_DisplayStringrowcol("    permanently",1,0);
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	89 e7       	ldi	r24, 0x79	; 121
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
     7f4:	ff ef       	ldi	r31, 0xFF	; 255
     7f6:	23 ed       	ldi	r18, 0xD3	; 211
     7f8:	80 e3       	ldi	r24, 0x30	; 48
     7fa:	f1 50       	subi	r31, 0x01	; 1
     7fc:	20 40       	sbci	r18, 0x00	; 0
     7fe:	80 40       	sbci	r24, 0x00	; 0
     800:	e1 f7       	brne	.-8      	; 0x7fa <get_puk_code+0x4e>
     802:	00 c0       	rjmp	.+0      	; 0x804 <get_puk_code+0x58>
     804:	00 00       	nop
	 _delay_ms(1000);
	 
	 LCD_Clear();
     806:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Clear>
	 LCD_DisplayStringrowcol("Enter PUK code: ",0,0);
     80a:	40 e0       	ldi	r20, 0x00	; 0
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	89 e8       	ldi	r24, 0x89	; 137
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
	 LCD_Select_RowCol(1,2);
     816:	62 e0       	ldi	r22, 0x02	; 2
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Select_RowCol>
	 length = get_password(puk_code);
     81e:	c8 01       	movw	r24, r16
     820:	0e 94 4b 02 	call	0x496	; 0x496 <get_password>
     824:	18 2f       	mov	r17, r24
	 
	 if(length != 10)		//PUK code is 10 numbers + the ending '*' which acts as an enter.
     826:	8a 30       	cpi	r24, 0x0A	; 10
     828:	b9 f0       	breq	.+46     	; 0x858 <get_puk_code+0xac>
	 {
		 LCD_Clear();
     82a:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Clear>
		 LCD_DisplayString(itoa((int)length,str,10));
     82e:	4a e0       	ldi	r20, 0x0A	; 10
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	6c e4       	ldi	r22, 0x4C	; 76
     834:	72 e0       	ldi	r23, 0x02	; 2
     836:	81 2f       	mov	r24, r17
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <itoa>
     83e:	0e 94 91 01 	call	0x322	; 0x322 <LCD_DisplayString>
     842:	9f ef       	ldi	r25, 0xFF	; 255
     844:	e3 ed       	ldi	r30, 0xD3	; 211
     846:	f0 e3       	ldi	r31, 0x30	; 48
     848:	91 50       	subi	r25, 0x01	; 1
     84a:	e0 40       	sbci	r30, 0x00	; 0
     84c:	f0 40       	sbci	r31, 0x00	; 0
     84e:	e1 f7       	brne	.-8      	; 0x848 <get_puk_code+0x9c>
     850:	00 c0       	rjmp	.+0      	; 0x852 <get_puk_code+0xa6>
     852:	00 00       	nop
		 _delay_ms(1000);
		 return 0;
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	12 c0       	rjmp	.+36     	; 0x87c <__stack+0x1d>
     858:	ce 01       	movw	r24, r28
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	7c 01       	movw	r14, r24
	 LCD_Clear();
	 LCD_DisplayStringrowcol("Enter PUK code: ",0,0);
	 LCD_Select_RowCol(1,2);
	 length = get_password(puk_code);
	 
	 if(length != 10)		//PUK code is 10 numbers + the ending '*' which acts as an enter.
     85e:	1b e1       	ldi	r17, 0x1B	; 27
	 }
	 else
	 {
		 for(i = 0; i < 10; i++)
		 {
			 if(puk_code[i] != eeprom_read(i+27))		//Password is stored in EEPROM from location 27 to 37
     860:	f7 01       	movw	r30, r14
     862:	01 91       	ld	r16, Z+
     864:	7f 01       	movw	r14, r30
     866:	81 2f       	mov	r24, r17
     868:	0e 94 f7 06 	call	0xdee	; 0xdee <eeprom_read>
     86c:	08 13       	cpse	r16, r24
     86e:	05 c0       	rjmp	.+10     	; 0x87a <__stack+0x1b>
     870:	1f 5f       	subi	r17, 0xFF	; 255
		 _delay_ms(1000);
		 return 0;
	 }
	 else
	 {
		 for(i = 0; i < 10; i++)
     872:	15 32       	cpi	r17, 0x25	; 37
     874:	a9 f7       	brne	.-22     	; 0x860 <__stack+0x1>
			 if(puk_code[i] != eeprom_read(i+27))		//Password is stored in EEPROM from location 27 to 37
			 {
				 return 0;
			 }
		 }
		 return 1;
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	01 c0       	rjmp	.+2      	; 0x87c <__stack+0x1d>
	 {
		 for(i = 0; i < 10; i++)
		 {
			 if(puk_code[i] != eeprom_read(i+27))		//Password is stored in EEPROM from location 27 to 37
			 {
				 return 0;
     87a:	80 e0       	ldi	r24, 0x00	; 0
			 }
		 }
		 return 1;
	 }
 }
     87c:	2a 96       	adiw	r28, 0x0a	; 10
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	de bf       	out	0x3e, r29	; 62
     884:	0f be       	out	0x3f, r0	; 63
     886:	cd bf       	out	0x3d, r28	; 61
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	ff 90       	pop	r15
     892:	ef 90       	pop	r14
     894:	08 95       	ret

00000896 <try_again>:
 {
 LCD_DisplayString("foooo");
 }
 }
 	void try_again (void)
 	{
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
	 	static unsigned char number_of_trials = 0;
	 	number_of_trials = eeprom_read(NUM_OF_TRIALS_ADDR);
     89a:	89 e1       	ldi	r24, 0x19	; 25
     89c:	0e 94 f7 06 	call	0xdee	; 0xdee <eeprom_read>
 		eeprom_write(NUM_OF_TRIALS_ADDR,++number_of_trials);			//This variable is stored in EEPROM location number 25
     8a0:	61 e0       	ldi	r22, 0x01	; 1
     8a2:	68 0f       	add	r22, r24
     8a4:	89 e1       	ldi	r24, 0x19	; 25
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <eeprom_write>
 	
 	if(eeprom_read(NUM_OF_TRIALS_ADDR) == 3 || eeprom_read(NUM_OF_TRIALS_ADDR) == 6)
     8ac:	89 e1       	ldi	r24, 0x19	; 25
     8ae:	0e 94 f7 06 	call	0xdee	; 0xdee <eeprom_read>
     8b2:	83 30       	cpi	r24, 0x03	; 3
     8b4:	29 f0       	breq	.+10     	; 0x8c0 <try_again+0x2a>
     8b6:	89 e1       	ldi	r24, 0x19	; 25
     8b8:	0e 94 f7 06 	call	0xdee	; 0xdee <eeprom_read>
     8bc:	86 30       	cpi	r24, 0x06	; 6
     8be:	69 f5       	brne	.+90     	; 0x91a <try_again+0x84>
 	{
	 	unsigned char i = 0;
	 	LCD_Clear();
     8c0:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Clear>
	 	LCD_DisplayStringrowcol("Wrong password",0,2);
     8c4:	42 e0       	ldi	r20, 0x02	; 2
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	8a e9       	ldi	r24, 0x9A	; 154
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
	 	LCD_DisplayStringrowcol("Try again in    Sec",1,0);
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	61 e0       	ldi	r22, 0x01	; 1
     8d4:	89 ea       	ldi	r24, 0xA9	; 169
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
     8dc:	cb e3       	ldi	r28, 0x3B	; 59
     8de:	d0 e0       	ldi	r29, 0x00	; 0
	 	for(i = 59; i > 0; i--)
	 	{
		 	LCD_Select_RowCol(1,14);
     8e0:	6e e0       	ldi	r22, 0x0E	; 14
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Select_RowCol>
		 	itoa((int)i, str, 10);
     8e8:	4a e0       	ldi	r20, 0x0A	; 10
     8ea:	50 e0       	ldi	r21, 0x00	; 0
     8ec:	6c e4       	ldi	r22, 0x4C	; 76
     8ee:	72 e0       	ldi	r23, 0x02	; 2
     8f0:	ce 01       	movw	r24, r28
     8f2:	0e 94 fe 06 	call	0xdfc	; 0xdfc <itoa>
		 	LCD_DisplayString(str);
     8f6:	8c e4       	ldi	r24, 0x4C	; 76
     8f8:	92 e0       	ldi	r25, 0x02	; 2
     8fa:	0e 94 91 01 	call	0x322	; 0x322 <LCD_DisplayString>
     8fe:	2f ef       	ldi	r18, 0xFF	; 255
     900:	81 ee       	ldi	r24, 0xE1	; 225
     902:	94 e0       	ldi	r25, 0x04	; 4
     904:	21 50       	subi	r18, 0x01	; 1
     906:	80 40       	sbci	r24, 0x00	; 0
     908:	90 40       	sbci	r25, 0x00	; 0
     90a:	e1 f7       	brne	.-8      	; 0x904 <try_again+0x6e>
     90c:	00 c0       	rjmp	.+0      	; 0x90e <try_again+0x78>
     90e:	00 00       	nop
     910:	21 97       	sbiw	r28, 0x01	; 1
 	{
	 	unsigned char i = 0;
	 	LCD_Clear();
	 	LCD_DisplayStringrowcol("Wrong password",0,2);
	 	LCD_DisplayStringrowcol("Try again in    Sec",1,0);
	 	for(i = 59; i > 0; i--)
     912:	31 f7       	brne	.-52     	; 0x8e0 <try_again+0x4a>
		 	LCD_Select_RowCol(1,14);
		 	itoa((int)i, str, 10);
		 	LCD_DisplayString(str);
		 	_delay_ms(100);
	 	}
	 	log_in();
     914:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <log_in>
	 	static unsigned char number_of_trials = 0;
	 	number_of_trials = eeprom_read(NUM_OF_TRIALS_ADDR);
 		eeprom_write(NUM_OF_TRIALS_ADDR,++number_of_trials);			//This variable is stored in EEPROM location number 25
 	
 	if(eeprom_read(NUM_OF_TRIALS_ADDR) == 3 || eeprom_read(NUM_OF_TRIALS_ADDR) == 6)
 	{
     918:	40 c0       	rjmp	.+128    	; 0x99a <try_again+0x104>
		 	_delay_ms(100);
	 	}
	 	log_in();
 	}
 	
 	 else if (eeprom_read(NUM_OF_TRIALS_ADDR) >= 9)
     91a:	89 e1       	ldi	r24, 0x19	; 25
     91c:	0e 94 f7 06 	call	0xdee	; 0xdee <eeprom_read>
     920:	89 30       	cpi	r24, 0x09	; 9
     922:	10 f1       	brcs	.+68     	; 0x968 <try_again+0xd2>
 	{
	 	eeprom_write(26,0xFF);
     924:	6f ef       	ldi	r22, 0xFF	; 255
     926:	8a e1       	ldi	r24, 0x1A	; 26
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <eeprom_write>
	 	unsigned char chk = 0;
	 	do
	 	{
		 	chk = get_puk_code();
     92e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <get_puk_code>
		 	
	 	} while (!chk);
     932:	88 23       	and	r24, r24
     934:	e1 f3       	breq	.-8      	; 0x92e <try_again+0x98>
	 	
	 	LCD_Clear();
     936:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Clear>
	 	LCD_DisplayStringrowcol("Successful operation",0,3);
     93a:	43 e0       	ldi	r20, 0x03	; 3
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	8d eb       	ldi	r24, 0xBD	; 189
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
	 	eeprom_write(NUM_OF_TRIALS_ADDR,0);
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	89 e1       	ldi	r24, 0x19	; 25
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <eeprom_write>
     950:	2f ef       	ldi	r18, 0xFF	; 255
     952:	83 ed       	ldi	r24, 0xD3	; 211
     954:	90 e3       	ldi	r25, 0x30	; 48
     956:	21 50       	subi	r18, 0x01	; 1
     958:	80 40       	sbci	r24, 0x00	; 0
     95a:	90 40       	sbci	r25, 0x00	; 0
     95c:	e1 f7       	brne	.-8      	; 0x956 <try_again+0xc0>
     95e:	00 c0       	rjmp	.+0      	; 0x960 <try_again+0xca>
     960:	00 00       	nop
	 	_delay_ms(1000);
	 	sign_up();
     962:	0e 94 96 02 	call	0x52c	; 0x52c <sign_up>
     966:	19 c0       	rjmp	.+50     	; 0x99a <try_again+0x104>
 	}
 	
 	else
 	{
	 	LCD_Clear();
     968:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Clear>
	 	LCD_DisplayStringrowcol("Wrong password",0,1);
     96c:	41 e0       	ldi	r20, 0x01	; 1
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	8a e9       	ldi	r24, 0x9A	; 154
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
	 	LCD_DisplayStringrowcol("Plz, try again",1,1);
     978:	41 e0       	ldi	r20, 0x01	; 1
     97a:	61 e0       	ldi	r22, 0x01	; 1
     97c:	82 ed       	ldi	r24, 0xD2	; 210
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
     984:	2f ef       	ldi	r18, 0xFF	; 255
     986:	83 ed       	ldi	r24, 0xD3	; 211
     988:	90 e3       	ldi	r25, 0x30	; 48
     98a:	21 50       	subi	r18, 0x01	; 1
     98c:	80 40       	sbci	r24, 0x00	; 0
     98e:	90 40       	sbci	r25, 0x00	; 0
     990:	e1 f7       	brne	.-8      	; 0x98a <try_again+0xf4>
     992:	00 c0       	rjmp	.+0      	; 0x994 <try_again+0xfe>
     994:	00 00       	nop
	 	_delay_ms(1000);
	 	log_in();
     996:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <log_in>
 	}
 }
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	08 95       	ret

000009a0 <log_in>:
	LCD_Clear();	
	return cnt;
}
 
 void log_in (void)
 {
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
     9ac:	2b 97       	sbiw	r28, 0x0b	; 11
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	f8 94       	cli
     9b2:	de bf       	out	0x3e, r29	; 62
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	cd bf       	out	0x3d, r28	; 61
	 unsigned char entered_password[11] = {0};				//The entered password is saved here
     9b8:	8e 01       	movw	r16, r28
     9ba:	0f 5f       	subi	r16, 0xFF	; 255
     9bc:	1f 4f       	sbci	r17, 0xFF	; 255
     9be:	8b e0       	ldi	r24, 0x0B	; 11
     9c0:	f8 01       	movw	r30, r16
     9c2:	11 92       	st	Z+, r1
     9c4:	8a 95       	dec	r24
     9c6:	e9 f7       	brne	.-6      	; 0x9c2 <log_in+0x22>
	 unsigned char length = 0;								//Length of entered password
	 
	 LCD_Clear();
     9c8:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Clear>
	 LCD_DisplayStringrowcol("Enter your password: ",0,0);
     9cc:	40 e0       	ldi	r20, 0x00	; 0
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	81 ee       	ldi	r24, 0xE1	; 225
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
	 LCD_Select_RowCol(1,2);
     9d8:	62 e0       	ldi	r22, 0x02	; 2
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Select_RowCol>
	 length = get_password(entered_password);
     9e0:	c8 01       	movw	r24, r16
     9e2:	0e 94 4b 02 	call	0x496	; 0x496 <get_password>
	 
	 if(check_password(length, entered_password))
     9e6:	b8 01       	movw	r22, r16
     9e8:	0e 94 39 03 	call	0x672	; 0x672 <check_password>
     9ec:	88 23       	and	r24, r24
     9ee:	19 f0       	breq	.+6      	; 0x9f6 <log_in+0x56>
	 {
		open_the_door();
     9f0:	0e 94 c7 01 	call	0x38e	; 0x38e <open_the_door>
     9f4:	02 c0       	rjmp	.+4      	; 0x9fa <log_in+0x5a>
	 }
	 else
	 {
		 try_again();
     9f6:	0e 94 4b 04 	call	0x896	; 0x896 <try_again>
	 }
 }
     9fa:	2b 96       	adiw	r28, 0x0b	; 11
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	f8 94       	cli
     a00:	de bf       	out	0x3e, r29	; 62
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	cd bf       	out	0x3d, r28	; 61
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	08 95       	ret

00000a10 <choose_listsecond>:
	 LCD_DisplayStringrowcol("(2)sign-up",1,0);
 }

 choose_listsecond()
 {
  LCD_Clear();
     a10:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Clear>
  LCD_DisplayStringrowcol("(1)Log-in",0,0);
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	8f e4       	ldi	r24, 0x4F	; 79
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
  LCD_DisplayStringrowcol("(2)Change Password",1,0);
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	61 e0       	ldi	r22, 0x01	; 1
     a24:	87 ef       	ldi	r24, 0xF7	; 247
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_DisplayStringrowcol>
 if (keyfind() == '1')
     a2c:	0e 94 61 00 	call	0xc2	; 0xc2 <keyfind>
     a30:	81 33       	cpi	r24, 0x31	; 49
     a32:	19 f4       	brne	.+6      	; 0xa3a <choose_listsecond+0x2a>
 {
	log_in();
     a34:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <log_in>
     a38:	08 95       	ret
 }
 else if (keyfind() == '2')
     a3a:	0e 94 61 00 	call	0xc2	; 0xc2 <keyfind>
     a3e:	82 33       	cpi	r24, 0x32	; 50
     a40:	19 f4       	brne	.+6      	; 0xa48 <choose_listsecond+0x38>
 {
 change_password();
     a42:	0e 94 78 03 	call	0x6f0	; 0x6f0 <change_password>
     a46:	08 95       	ret
 }
 else
 {
 LCD_DisplayString("foooo");
     a48:	8a e0       	ldi	r24, 0x0A	; 10
     a4a:	92 e0       	ldi	r25, 0x02	; 2
     a4c:	0e 94 91 01 	call	0x322	; 0x322 <LCD_DisplayString>
     a50:	08 95       	ret

00000a52 <GPIO_DirectionSet>:

void GPIO_DirectionSet(
						volatile gio* Current_Gpio,
						PINS pin_number,
						IO_Modes  Mode)
{
     a52:	fc 01       	movw	r30, r24
		switch (Mode)
     a54:	41 30       	cpi	r20, 0x01	; 1
     a56:	c9 f0       	breq	.+50     	; 0xa8a <GPIO_DirectionSet+0x38>
     a58:	18 f0       	brcs	.+6      	; 0xa60 <GPIO_DirectionSet+0xe>
     a5a:	42 30       	cpi	r20, 0x02	; 2
     a5c:	61 f1       	breq	.+88     	; 0xab6 <GPIO_DirectionSet+0x64>
     a5e:	08 95       	ret
		{
			case INPUT_FLOAT:
				 if (pin_number != ALLRegister)
     a60:	68 30       	cpi	r22, 0x08	; 8
     a62:	81 f0       	breq	.+32     	; 0xa84 <GPIO_DirectionSet+0x32>
				 {
					 CLEARBIT(Current_Gpio->DDR.Data,pin_number);
     a64:	21 81       	ldd	r18, Z+1	; 0x01
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <GPIO_DirectionSet+0x1e>
     a6c:	88 0f       	add	r24, r24
     a6e:	99 1f       	adc	r25, r25
     a70:	6a 95       	dec	r22
     a72:	e2 f7       	brpl	.-8      	; 0xa6c <GPIO_DirectionSet+0x1a>
     a74:	80 95       	com	r24
     a76:	92 2f       	mov	r25, r18
     a78:	98 23       	and	r25, r24
     a7a:	91 83       	std	Z+1, r25	; 0x01
					 CLEARBIT(Current_Gpio->Port.Data,pin_number);
     a7c:	92 81       	ldd	r25, Z+2	; 0x02
     a7e:	89 23       	and	r24, r25
     a80:	82 83       	std	Z+2, r24	; 0x02
     a82:	08 95       	ret
				 }
				 else
				 {
					 Current_Gpio->DDR.Data=0;
     a84:	11 82       	std	Z+1, r1	; 0x01
					 Current_Gpio->Port.Data=0;
     a86:	12 82       	std	Z+2, r1	; 0x02
     a88:	08 95       	ret
				 }
			break;
			case INPUT_PULLUP:
				  if (pin_number != ALLRegister)
     a8a:	68 30       	cpi	r22, 0x08	; 8
     a8c:	81 f0       	breq	.+32     	; 0xaae <GPIO_DirectionSet+0x5c>
				  {
					  CLEARBIT(Current_Gpio->DDR.Data,pin_number);
     a8e:	21 81       	ldd	r18, Z+1	; 0x01
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <GPIO_DirectionSet+0x48>
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	6a 95       	dec	r22
     a9c:	e2 f7       	brpl	.-8      	; 0xa96 <GPIO_DirectionSet+0x44>
     a9e:	98 2f       	mov	r25, r24
     aa0:	90 95       	com	r25
     aa2:	92 23       	and	r25, r18
     aa4:	91 83       	std	Z+1, r25	; 0x01
					  SETBIT(Current_Gpio->Port.Data,pin_number);
     aa6:	92 81       	ldd	r25, Z+2	; 0x02
     aa8:	89 2b       	or	r24, r25
     aaa:	82 83       	std	Z+2, r24	; 0x02
     aac:	08 95       	ret
				  }
				  else
				  {
					  Current_Gpio->DDR.Data=0;
     aae:	11 82       	std	Z+1, r1	; 0x01
					  Current_Gpio->Port.Data=0xff;
     ab0:	8f ef       	ldi	r24, 0xFF	; 255
     ab2:	82 83       	std	Z+2, r24	; 0x02
     ab4:	08 95       	ret
				  }
			break;
			case OUTPUT:
				  if (pin_number != ALLRegister)
     ab6:	68 30       	cpi	r22, 0x08	; 8
     ab8:	81 f0       	breq	.+32     	; 0xada <GPIO_DirectionSet+0x88>
				  {
					  SETBIT(Current_Gpio->DDR.Data,pin_number);
     aba:	21 81       	ldd	r18, Z+1	; 0x01
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <GPIO_DirectionSet+0x74>
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	6a 95       	dec	r22
     ac8:	e2 f7       	brpl	.-8      	; 0xac2 <GPIO_DirectionSet+0x70>
     aca:	92 2f       	mov	r25, r18
     acc:	98 2b       	or	r25, r24
     ace:	91 83       	std	Z+1, r25	; 0x01
					  CLEARBIT(Current_Gpio->Port.Data,pin_number);
     ad0:	92 81       	ldd	r25, Z+2	; 0x02
     ad2:	80 95       	com	r24
     ad4:	89 23       	and	r24, r25
     ad6:	82 83       	std	Z+2, r24	; 0x02
     ad8:	08 95       	ret
				  }
				  else
				  {
					  Current_Gpio->DDR.Data=0xff;
     ada:	8f ef       	ldi	r24, 0xFF	; 255
     adc:	81 83       	std	Z+1, r24	; 0x01
					  Current_Gpio->Port.Data=0;
     ade:	12 82       	std	Z+2, r1	; 0x02
     ae0:	08 95       	ret

00000ae2 <GPIO_OutputHandle>:
void GPIO_OutputHandle(
						volatile gio* Current_Gpio,
						PINS pin_number,
						DigitalValues Value)
{
	 if (pin_number != ALLRegister)
     ae2:	68 30       	cpi	r22, 0x08	; 8
     ae4:	d9 f0       	breq	.+54     	; 0xb1c <GPIO_OutputHandle+0x3a>
	 {
		if ( Value == HIGH)
     ae6:	41 30       	cpi	r20, 0x01	; 1
     ae8:	61 f4       	brne	.+24     	; 0xb02 <GPIO_OutputHandle+0x20>
		{
			SETBIT(Current_Gpio->Port.Data,pin_number);
     aea:	fc 01       	movw	r30, r24
     aec:	42 81       	ldd	r20, Z+2	; 0x02
     aee:	21 e0       	ldi	r18, 0x01	; 1
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	02 c0       	rjmp	.+4      	; 0xaf8 <GPIO_OutputHandle+0x16>
     af4:	22 0f       	add	r18, r18
     af6:	33 1f       	adc	r19, r19
     af8:	6a 95       	dec	r22
     afa:	e2 f7       	brpl	.-8      	; 0xaf4 <GPIO_OutputHandle+0x12>
     afc:	24 2b       	or	r18, r20
     afe:	22 83       	std	Z+2, r18	; 0x02
     b00:	08 95       	ret
		}
		else
		{
			CLEARBIT(Current_Gpio->Port.Data,pin_number);
     b02:	fc 01       	movw	r30, r24
     b04:	42 81       	ldd	r20, Z+2	; 0x02
     b06:	21 e0       	ldi	r18, 0x01	; 1
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	02 c0       	rjmp	.+4      	; 0xb10 <GPIO_OutputHandle+0x2e>
     b0c:	22 0f       	add	r18, r18
     b0e:	33 1f       	adc	r19, r19
     b10:	6a 95       	dec	r22
     b12:	e2 f7       	brpl	.-8      	; 0xb0c <GPIO_OutputHandle+0x2a>
     b14:	20 95       	com	r18
     b16:	24 23       	and	r18, r20
     b18:	22 83       	std	Z+2, r18	; 0x02
     b1a:	08 95       	ret
		}
	 }
	 else
	 {
		 Current_Gpio->Port.Data = Value;
     b1c:	fc 01       	movw	r30, r24
     b1e:	42 83       	std	Z+2, r20	; 0x02
     b20:	08 95       	ret

00000b22 <__vector_1>:
	 void (* volatile ISR0_ptr)(void)=NULL;
	 void (* volatile ISR1_ptr)(void)=NULL;
	 void (* volatile ISR2_ptr)(void)=NULL;

ISR(INT0_vect)
{
     b22:	1f 92       	push	r1
     b24:	0f 92       	push	r0
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	0f 92       	push	r0
     b2a:	11 24       	eor	r1, r1
     b2c:	2f 93       	push	r18
     b2e:	3f 93       	push	r19
     b30:	4f 93       	push	r20
     b32:	5f 93       	push	r21
     b34:	6f 93       	push	r22
     b36:	7f 93       	push	r23
     b38:	8f 93       	push	r24
     b3a:	9f 93       	push	r25
     b3c:	af 93       	push	r26
     b3e:	bf 93       	push	r27
     b40:	ef 93       	push	r30
     b42:	ff 93       	push	r31
	if (ISR0_ptr != NULL)
     b44:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <ISR0_ptr>
     b48:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <ISR0_ptr+0x1>
     b4c:	89 2b       	or	r24, r25
     b4e:	29 f0       	breq	.+10     	; 0xb5a <__vector_1+0x38>
	{
		ISR0_ptr();
     b50:	e0 91 b4 02 	lds	r30, 0x02B4	; 0x8002b4 <ISR0_ptr>
     b54:	f0 91 b5 02 	lds	r31, 0x02B5	; 0x8002b5 <ISR0_ptr+0x1>
     b58:	09 95       	icall
	}	
	
}
     b5a:	ff 91       	pop	r31
     b5c:	ef 91       	pop	r30
     b5e:	bf 91       	pop	r27
     b60:	af 91       	pop	r26
     b62:	9f 91       	pop	r25
     b64:	8f 91       	pop	r24
     b66:	7f 91       	pop	r23
     b68:	6f 91       	pop	r22
     b6a:	5f 91       	pop	r21
     b6c:	4f 91       	pop	r20
     b6e:	3f 91       	pop	r19
     b70:	2f 91       	pop	r18
     b72:	0f 90       	pop	r0
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	0f 90       	pop	r0
     b78:	1f 90       	pop	r1
     b7a:	18 95       	reti

00000b7c <__vector_2>:


ISR(INT1_vect)
{
     b7c:	1f 92       	push	r1
     b7e:	0f 92       	push	r0
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	0f 92       	push	r0
     b84:	11 24       	eor	r1, r1
     b86:	2f 93       	push	r18
     b88:	3f 93       	push	r19
     b8a:	4f 93       	push	r20
     b8c:	5f 93       	push	r21
     b8e:	6f 93       	push	r22
     b90:	7f 93       	push	r23
     b92:	8f 93       	push	r24
     b94:	9f 93       	push	r25
     b96:	af 93       	push	r26
     b98:	bf 93       	push	r27
     b9a:	ef 93       	push	r30
     b9c:	ff 93       	push	r31
	if (ISR1_ptr != NULL)
     b9e:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <ISR1_ptr>
     ba2:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <ISR1_ptr+0x1>
     ba6:	89 2b       	or	r24, r25
     ba8:	29 f0       	breq	.+10     	; 0xbb4 <__vector_2+0x38>
	{
		ISR1_ptr();
     baa:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <ISR1_ptr>
     bae:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <ISR1_ptr+0x1>
     bb2:	09 95       	icall
	}
}
     bb4:	ff 91       	pop	r31
     bb6:	ef 91       	pop	r30
     bb8:	bf 91       	pop	r27
     bba:	af 91       	pop	r26
     bbc:	9f 91       	pop	r25
     bbe:	8f 91       	pop	r24
     bc0:	7f 91       	pop	r23
     bc2:	6f 91       	pop	r22
     bc4:	5f 91       	pop	r21
     bc6:	4f 91       	pop	r20
     bc8:	3f 91       	pop	r19
     bca:	2f 91       	pop	r18
     bcc:	0f 90       	pop	r0
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	0f 90       	pop	r0
     bd2:	1f 90       	pop	r1
     bd4:	18 95       	reti

00000bd6 <__vector_3>:
ISR(INT2_vect)
{
     bd6:	1f 92       	push	r1
     bd8:	0f 92       	push	r0
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	0f 92       	push	r0
     bde:	11 24       	eor	r1, r1
     be0:	2f 93       	push	r18
     be2:	3f 93       	push	r19
     be4:	4f 93       	push	r20
     be6:	5f 93       	push	r21
     be8:	6f 93       	push	r22
     bea:	7f 93       	push	r23
     bec:	8f 93       	push	r24
     bee:	9f 93       	push	r25
     bf0:	af 93       	push	r26
     bf2:	bf 93       	push	r27
     bf4:	ef 93       	push	r30
     bf6:	ff 93       	push	r31
	if (ISR2_ptr != NULL)
     bf8:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <ISR2_ptr>
     bfc:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <ISR2_ptr+0x1>
     c00:	89 2b       	or	r24, r25
     c02:	29 f0       	breq	.+10     	; 0xc0e <__vector_3+0x38>
	{
		ISR2_ptr();
     c04:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <ISR2_ptr>
     c08:	f0 91 b1 02 	lds	r31, 0x02B1	; 0x8002b1 <ISR2_ptr+0x1>
     c0c:	09 95       	icall
	}
}
     c0e:	ff 91       	pop	r31
     c10:	ef 91       	pop	r30
     c12:	bf 91       	pop	r27
     c14:	af 91       	pop	r26
     c16:	9f 91       	pop	r25
     c18:	8f 91       	pop	r24
     c1a:	7f 91       	pop	r23
     c1c:	6f 91       	pop	r22
     c1e:	5f 91       	pop	r21
     c20:	4f 91       	pop	r20
     c22:	3f 91       	pop	r19
     c24:	2f 91       	pop	r18
     c26:	0f 90       	pop	r0
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	0f 90       	pop	r0
     c2c:	1f 90       	pop	r1
     c2e:	18 95       	reti

00000c30 <ExInt_UserWarning_Error>:

void ExInt_UserWarning_Error(void)
{
	while(1)
	{
		printf("!! SomeThing Went Wrong !! Please Re Check Your Settings !!");
     c30:	c0 e1       	ldi	r28, 0x10	; 16
     c32:	d2 e0       	ldi	r29, 0x02	; 2
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	0e 94 2e 07 	call	0xe5c	; 0xe5c <printf>
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	f9 cf       	rjmp	.-14     	; 0xc34 <ExInt_UserWarning_Error+0x4>

00000c42 <Ext_InterruptEnable>:
	}
}

void Ext_InterruptEnable(Atmega32A_ExternalInterrupts int_num,Ex_InterruptModes  Mode)
{
	 switch (int_num)
     c42:	81 30       	cpi	r24, 0x01	; 1
     c44:	79 f1       	breq	.+94     	; 0xca4 <Ext_InterruptEnable+0x62>
     c46:	20 f0       	brcs	.+8      	; 0xc50 <Ext_InterruptEnable+0xe>
     c48:	82 30       	cpi	r24, 0x02	; 2
     c4a:	09 f4       	brne	.+2      	; 0xc4e <Ext_InterruptEnable+0xc>
     c4c:	55 c0       	rjmp	.+170    	; 0xcf8 <Ext_InterruptEnable+0xb6>
     c4e:	66 c0       	rjmp	.+204    	; 0xd1c <Ext_InterruptEnable+0xda>
	 {
		 case Interrupt0:
			  if      (Mode == RisingMode)
     c50:	61 11       	cpse	r22, r1
     c52:	07 c0       	rjmp	.+14     	; 0xc62 <Ext_InterruptEnable+0x20>
			  {
				  MCUCR->Bits.B0=1;
     c54:	85 b7       	in	r24, 0x35	; 53
     c56:	81 60       	ori	r24, 0x01	; 1
     c58:	85 bf       	out	0x35, r24	; 53
				  MCUCR ->Bits.B1=1;
     c5a:	85 b7       	in	r24, 0x35	; 53
     c5c:	82 60       	ori	r24, 0x02	; 2
     c5e:	85 bf       	out	0x35, r24	; 53
     c60:	1d c0       	rjmp	.+58     	; 0xc9c <Ext_InterruptEnable+0x5a>
			  }
			  else if (Mode	== FallingMode)
     c62:	61 30       	cpi	r22, 0x01	; 1
     c64:	39 f4       	brne	.+14     	; 0xc74 <Ext_InterruptEnable+0x32>
			  {
				  MCUCR ->Bits.B0=0;
     c66:	85 b7       	in	r24, 0x35	; 53
     c68:	8e 7f       	andi	r24, 0xFE	; 254
     c6a:	85 bf       	out	0x35, r24	; 53
				  MCUCR ->Bits.B1=1;
     c6c:	85 b7       	in	r24, 0x35	; 53
     c6e:	82 60       	ori	r24, 0x02	; 2
     c70:	85 bf       	out	0x35, r24	; 53
     c72:	14 c0       	rjmp	.+40     	; 0xc9c <Ext_InterruptEnable+0x5a>
			  }
			  else if (Mode == BothEdges)
     c74:	62 30       	cpi	r22, 0x02	; 2
     c76:	39 f4       	brne	.+14     	; 0xc86 <Ext_InterruptEnable+0x44>
			  {
				  MCUCR ->Bits.B0=1;
     c78:	85 b7       	in	r24, 0x35	; 53
     c7a:	81 60       	ori	r24, 0x01	; 1
     c7c:	85 bf       	out	0x35, r24	; 53
				  MCUCR ->Bits.B1=0;
     c7e:	85 b7       	in	r24, 0x35	; 53
     c80:	8d 7f       	andi	r24, 0xFD	; 253
     c82:	85 bf       	out	0x35, r24	; 53
     c84:	0b c0       	rjmp	.+22     	; 0xc9c <Ext_InterruptEnable+0x5a>
			  }
			  else if (Mode == LOW_Level)
     c86:	63 30       	cpi	r22, 0x03	; 3
     c88:	39 f4       	brne	.+14     	; 0xc98 <Ext_InterruptEnable+0x56>
			  {
				  MCUCR ->Bits.B0=0;
     c8a:	85 b7       	in	r24, 0x35	; 53
     c8c:	8e 7f       	andi	r24, 0xFE	; 254
     c8e:	85 bf       	out	0x35, r24	; 53
				  MCUCR ->Bits.B1=0;
     c90:	85 b7       	in	r24, 0x35	; 53
     c92:	8d 7f       	andi	r24, 0xFD	; 253
     c94:	85 bf       	out	0x35, r24	; 53
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <Ext_InterruptEnable+0x5a>
			  }
			  else
			  {
				  ExInt_UserWarning_Error();
     c98:	0e 94 18 06 	call	0xc30	; 0xc30 <ExInt_UserWarning_Error>
			  }
			  /* this Line Enables External Interrupt 0 */
			  GICR->Bits.B6=1;
     c9c:	8b b7       	in	r24, 0x3b	; 59
     c9e:	80 64       	ori	r24, 0x40	; 64
     ca0:	8b bf       	out	0x3b, r24	; 59
		 break;
     ca2:	08 95       	ret
		 case Interrupt1:
			  if      (Mode == RisingMode)
     ca4:	61 11       	cpse	r22, r1
     ca6:	07 c0       	rjmp	.+14     	; 0xcb6 <Ext_InterruptEnable+0x74>
			  {
				  MCUCR ->Bits.B3=1;
     ca8:	85 b7       	in	r24, 0x35	; 53
     caa:	88 60       	ori	r24, 0x08	; 8
     cac:	85 bf       	out	0x35, r24	; 53
				  MCUCR ->Bits.B2=1;
     cae:	85 b7       	in	r24, 0x35	; 53
     cb0:	84 60       	ori	r24, 0x04	; 4
     cb2:	85 bf       	out	0x35, r24	; 53
     cb4:	1d c0       	rjmp	.+58     	; 0xcf0 <Ext_InterruptEnable+0xae>
			  }
			  else if (Mode	== FallingMode)
     cb6:	61 30       	cpi	r22, 0x01	; 1
     cb8:	39 f4       	brne	.+14     	; 0xcc8 <Ext_InterruptEnable+0x86>
			  {
				  MCUCR ->Bits.B3=1;
     cba:	85 b7       	in	r24, 0x35	; 53
     cbc:	88 60       	ori	r24, 0x08	; 8
     cbe:	85 bf       	out	0x35, r24	; 53
				  MCUCR ->Bits.B2=0;
     cc0:	85 b7       	in	r24, 0x35	; 53
     cc2:	8b 7f       	andi	r24, 0xFB	; 251
     cc4:	85 bf       	out	0x35, r24	; 53
     cc6:	14 c0       	rjmp	.+40     	; 0xcf0 <Ext_InterruptEnable+0xae>
			  }
			  else if (Mode == BothEdges)
     cc8:	62 30       	cpi	r22, 0x02	; 2
     cca:	39 f4       	brne	.+14     	; 0xcda <Ext_InterruptEnable+0x98>
			  {
				  MCUCR ->Bits.B3=0;
     ccc:	85 b7       	in	r24, 0x35	; 53
     cce:	87 7f       	andi	r24, 0xF7	; 247
     cd0:	85 bf       	out	0x35, r24	; 53
				  MCUCR ->Bits.B2=1;
     cd2:	85 b7       	in	r24, 0x35	; 53
     cd4:	84 60       	ori	r24, 0x04	; 4
     cd6:	85 bf       	out	0x35, r24	; 53
     cd8:	0b c0       	rjmp	.+22     	; 0xcf0 <Ext_InterruptEnable+0xae>
			  }
			  else if (Mode == LOW_Level)
     cda:	63 30       	cpi	r22, 0x03	; 3
     cdc:	39 f4       	brne	.+14     	; 0xcec <Ext_InterruptEnable+0xaa>
			  {
				  MCUCR ->Bits.B3=0;
     cde:	85 b7       	in	r24, 0x35	; 53
     ce0:	87 7f       	andi	r24, 0xF7	; 247
     ce2:	85 bf       	out	0x35, r24	; 53
				  MCUCR ->Bits.B2=0;
     ce4:	85 b7       	in	r24, 0x35	; 53
     ce6:	8b 7f       	andi	r24, 0xFB	; 251
     ce8:	85 bf       	out	0x35, r24	; 53
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <Ext_InterruptEnable+0xae>
			  }
			  else
			  {
				  ExInt_UserWarning_Error();
     cec:	0e 94 18 06 	call	0xc30	; 0xc30 <ExInt_UserWarning_Error>
			  }
			  /* this Line Enables External Interrupt 1 */
			  GICR->Bits.B7=1;
     cf0:	8b b7       	in	r24, 0x3b	; 59
     cf2:	80 68       	ori	r24, 0x80	; 128
     cf4:	8b bf       	out	0x3b, r24	; 59
		 break;
     cf6:	08 95       	ret
		 case Interrupt2:
			  if      (Mode == RisingMode)
     cf8:	61 11       	cpse	r22, r1
     cfa:	04 c0       	rjmp	.+8      	; 0xd04 <Ext_InterruptEnable+0xc2>
			  {
				 MCUCSR->Bits.B6=1; 
     cfc:	84 b7       	in	r24, 0x34	; 52
     cfe:	80 64       	ori	r24, 0x40	; 64
     d00:	84 bf       	out	0x34, r24	; 52
     d02:	08 c0       	rjmp	.+16     	; 0xd14 <Ext_InterruptEnable+0xd2>
			  }
			  else if (Mode	== FallingMode)
     d04:	61 30       	cpi	r22, 0x01	; 1
     d06:	21 f4       	brne	.+8      	; 0xd10 <Ext_InterruptEnable+0xce>
			  {
				  MCUCSR->Bits.B6=0; 
     d08:	84 b7       	in	r24, 0x34	; 52
     d0a:	8f 7b       	andi	r24, 0xBF	; 191
     d0c:	84 bf       	out	0x34, r24	; 52
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <Ext_InterruptEnable+0xd2>
			  }
			  else
			  {
				  ExInt_UserWarning_Error();
     d10:	0e 94 18 06 	call	0xc30	; 0xc30 <ExInt_UserWarning_Error>
			  }
			  /* this Line Enables External Interrupt 2 */
			  GICR->Bits.B5=1;
     d14:	8b b7       	in	r24, 0x3b	; 59
     d16:	80 62       	ori	r24, 0x20	; 32
     d18:	8b bf       	out	0x3b, r24	; 59
		 break;
     d1a:	08 95       	ret
		 default:
				  ExInt_UserWarning_Error();
     d1c:	0e 94 18 06 	call	0xc30	; 0xc30 <ExInt_UserWarning_Error>

00000d20 <__vector_11>:

void (* volatile Timer0_ISR_OVF)(void) = NULL;
void (* volatile Timer0_ISR_COMP)(void) = NULL;

ISR(TIMER0_OVF_vect)
{
     d20:	1f 92       	push	r1
     d22:	0f 92       	push	r0
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	0f 92       	push	r0
     d28:	11 24       	eor	r1, r1
     d2a:	2f 93       	push	r18
     d2c:	3f 93       	push	r19
     d2e:	4f 93       	push	r20
     d30:	5f 93       	push	r21
     d32:	6f 93       	push	r22
     d34:	7f 93       	push	r23
     d36:	8f 93       	push	r24
     d38:	9f 93       	push	r25
     d3a:	af 93       	push	r26
     d3c:	bf 93       	push	r27
     d3e:	ef 93       	push	r30
     d40:	ff 93       	push	r31
	if (Timer0_ISR_OVF != NULL)
     d42:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <Timer0_ISR_OVF>
     d46:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <Timer0_ISR_OVF+0x1>
     d4a:	89 2b       	or	r24, r25
     d4c:	29 f0       	breq	.+10     	; 0xd58 <__vector_11+0x38>
	{
		Timer0_ISR_OVF();
     d4e:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <Timer0_ISR_OVF>
     d52:	f0 91 b9 02 	lds	r31, 0x02B9	; 0x8002b9 <Timer0_ISR_OVF+0x1>
     d56:	09 95       	icall
	}
}
     d58:	ff 91       	pop	r31
     d5a:	ef 91       	pop	r30
     d5c:	bf 91       	pop	r27
     d5e:	af 91       	pop	r26
     d60:	9f 91       	pop	r25
     d62:	8f 91       	pop	r24
     d64:	7f 91       	pop	r23
     d66:	6f 91       	pop	r22
     d68:	5f 91       	pop	r21
     d6a:	4f 91       	pop	r20
     d6c:	3f 91       	pop	r19
     d6e:	2f 91       	pop	r18
     d70:	0f 90       	pop	r0
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	0f 90       	pop	r0
     d76:	1f 90       	pop	r1
     d78:	18 95       	reti

00000d7a <__vector_10>:
ISR(TIMER0_COMP_vect)
{
     d7a:	1f 92       	push	r1
     d7c:	0f 92       	push	r0
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	0f 92       	push	r0
     d82:	11 24       	eor	r1, r1
     d84:	2f 93       	push	r18
     d86:	3f 93       	push	r19
     d88:	4f 93       	push	r20
     d8a:	5f 93       	push	r21
     d8c:	6f 93       	push	r22
     d8e:	7f 93       	push	r23
     d90:	8f 93       	push	r24
     d92:	9f 93       	push	r25
     d94:	af 93       	push	r26
     d96:	bf 93       	push	r27
     d98:	ef 93       	push	r30
     d9a:	ff 93       	push	r31
	if (Timer0_ISR_COMP != NULL)
     d9c:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <Timer0_ISR_COMP>
     da0:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <Timer0_ISR_COMP+0x1>
     da4:	89 2b       	or	r24, r25
     da6:	29 f0       	breq	.+10     	; 0xdb2 <__vector_10+0x38>
	{
		Timer0_ISR_COMP();
     da8:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <Timer0_ISR_COMP>
     dac:	f0 91 b7 02 	lds	r31, 0x02B7	; 0x8002b7 <Timer0_ISR_COMP+0x1>
     db0:	09 95       	icall
	}
}
     db2:	ff 91       	pop	r31
     db4:	ef 91       	pop	r30
     db6:	bf 91       	pop	r27
     db8:	af 91       	pop	r26
     dba:	9f 91       	pop	r25
     dbc:	8f 91       	pop	r24
     dbe:	7f 91       	pop	r23
     dc0:	6f 91       	pop	r22
     dc2:	5f 91       	pop	r21
     dc4:	4f 91       	pop	r20
     dc6:	3f 91       	pop	r19
     dc8:	2f 91       	pop	r18
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	0f 90       	pop	r0
     dd0:	1f 90       	pop	r1
     dd2:	18 95       	reti

00000dd4 <eeprom_write>:

 #include "EEPROM.h"

 void eeprom_write(unsigned int address, unsigned char data)
 {
	 while((EECR & (1 << EEWE)) == 1);			//Wait for EEWE = 0, Which means that EEPROM is ready for read or write
     dd4:	2c b3       	in	r18, 0x1c	; 28
	 EEAR = address;							//Put the address in which you want to put the byte
     dd6:	9f bb       	out	0x1f, r25	; 31
     dd8:	8e bb       	out	0x1e, r24	; 30
	 EEDR = data;							//Put the desired byte
     dda:	6d bb       	out	0x1d, r22	; 29
	 EECR |= (1 << EEMWE);					//Set EEMWE to 1
     ddc:	e2 9a       	sbi	0x1c, 2	; 28
	 EECR |= (1 << EEWE);					//Set EEWE to 1 within 4 clock cycles (EEMWE will be cleared after 4 clock cycles)
     dde:	e1 9a       	sbi	0x1c, 1	; 28
     de0:	87 ea       	ldi	r24, 0xA7	; 167
     de2:	91 e6       	ldi	r25, 0x61	; 97
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	f1 f7       	brne	.-4      	; 0xde4 <eeprom_write+0x10>
     de8:	00 c0       	rjmp	.+0      	; 0xdea <eeprom_write+0x16>
     dea:	00 00       	nop
     dec:	08 95       	ret

00000dee <eeprom_read>:
	 _delay_ms(100);
 }

 unsigned char eeprom_read(unsigned char address)
 {
	 while((EECR & (1 << EEWE)) == 1);			//Wait for EEWE = 0, Which means that EEPROM is ready for read or write
     dee:	9c b3       	in	r25, 0x1c	; 28
	 EEAR = address;							//Put the address of byte you want to read
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	9f bb       	out	0x1f, r25	; 31
     df4:	8e bb       	out	0x1e, r24	; 30
	 EECR |= (1 << EERE);					//Set EERE to 1
     df6:	e0 9a       	sbi	0x1c, 0	; 28
	 return EEDR;							//Return the desired byte
     df8:	8d b3       	in	r24, 0x1d	; 29
     dfa:	08 95       	ret

00000dfc <itoa>:
     dfc:	45 32       	cpi	r20, 0x25	; 37
     dfe:	51 05       	cpc	r21, r1
     e00:	20 f4       	brcc	.+8      	; 0xe0a <itoa+0xe>
     e02:	42 30       	cpi	r20, 0x02	; 2
     e04:	10 f0       	brcs	.+4      	; 0xe0a <itoa+0xe>
     e06:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__itoa_ncheck>
     e0a:	fb 01       	movw	r30, r22
     e0c:	10 82       	st	Z, r1
     e0e:	cb 01       	movw	r24, r22
     e10:	08 95       	ret

00000e12 <__itoa_ncheck>:
     e12:	bb 27       	eor	r27, r27
     e14:	4a 30       	cpi	r20, 0x0A	; 10
     e16:	31 f4       	brne	.+12     	; 0xe24 <__itoa_ncheck+0x12>
     e18:	99 23       	and	r25, r25
     e1a:	22 f4       	brpl	.+8      	; 0xe24 <__itoa_ncheck+0x12>
     e1c:	bd e2       	ldi	r27, 0x2D	; 45
     e1e:	90 95       	com	r25
     e20:	81 95       	neg	r24
     e22:	9f 4f       	sbci	r25, 0xFF	; 255
     e24:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__utoa_common>

00000e28 <__utoa_ncheck>:
     e28:	bb 27       	eor	r27, r27

00000e2a <__utoa_common>:
     e2a:	fb 01       	movw	r30, r22
     e2c:	55 27       	eor	r21, r21
     e2e:	aa 27       	eor	r26, r26
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	aa 1f       	adc	r26, r26
     e36:	a4 17       	cp	r26, r20
     e38:	10 f0       	brcs	.+4      	; 0xe3e <__utoa_common+0x14>
     e3a:	a4 1b       	sub	r26, r20
     e3c:	83 95       	inc	r24
     e3e:	50 51       	subi	r21, 0x10	; 16
     e40:	b9 f7       	brne	.-18     	; 0xe30 <__utoa_common+0x6>
     e42:	a0 5d       	subi	r26, 0xD0	; 208
     e44:	aa 33       	cpi	r26, 0x3A	; 58
     e46:	08 f0       	brcs	.+2      	; 0xe4a <__utoa_common+0x20>
     e48:	a9 5d       	subi	r26, 0xD9	; 217
     e4a:	a1 93       	st	Z+, r26
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	79 f7       	brne	.-34     	; 0xe2e <__utoa_common+0x4>
     e50:	b1 11       	cpse	r27, r1
     e52:	b1 93       	st	Z+, r27
     e54:	11 92       	st	Z+, r1
     e56:	cb 01       	movw	r24, r22
     e58:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <strrev>

00000e5c <printf>:
     e5c:	a0 e0       	ldi	r26, 0x00	; 0
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e4 e3       	ldi	r30, 0x34	; 52
     e62:	f7 e0       	ldi	r31, 0x07	; 7
     e64:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__prologue_saves__+0x20>
     e68:	ae 01       	movw	r20, r28
     e6a:	4b 5f       	subi	r20, 0xFB	; 251
     e6c:	5f 4f       	sbci	r21, 0xFF	; 255
     e6e:	fa 01       	movw	r30, r20
     e70:	61 91       	ld	r22, Z+
     e72:	71 91       	ld	r23, Z+
     e74:	af 01       	movw	r20, r30
     e76:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <__iob+0x2>
     e7a:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <__iob+0x3>
     e7e:	0e 94 44 07 	call	0xe88	; 0xe88 <vfprintf>
     e82:	e2 e0       	ldi	r30, 0x02	; 2
     e84:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__epilogue_restores__+0x20>

00000e88 <vfprintf>:
     e88:	ab e0       	ldi	r26, 0x0B	; 11
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	ea e4       	ldi	r30, 0x4A	; 74
     e8e:	f7 e0       	ldi	r31, 0x07	; 7
     e90:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__prologue_saves__>
     e94:	6c 01       	movw	r12, r24
     e96:	7b 01       	movw	r14, r22
     e98:	8a 01       	movw	r16, r20
     e9a:	fc 01       	movw	r30, r24
     e9c:	17 82       	std	Z+7, r1	; 0x07
     e9e:	16 82       	std	Z+6, r1	; 0x06
     ea0:	83 81       	ldd	r24, Z+3	; 0x03
     ea2:	81 ff       	sbrs	r24, 1
     ea4:	cc c1       	rjmp	.+920    	; 0x123e <vfprintf+0x3b6>
     ea6:	ce 01       	movw	r24, r28
     ea8:	01 96       	adiw	r24, 0x01	; 1
     eaa:	3c 01       	movw	r6, r24
     eac:	f6 01       	movw	r30, r12
     eae:	93 81       	ldd	r25, Z+3	; 0x03
     eb0:	f7 01       	movw	r30, r14
     eb2:	93 fd       	sbrc	r25, 3
     eb4:	85 91       	lpm	r24, Z+
     eb6:	93 ff       	sbrs	r25, 3
     eb8:	81 91       	ld	r24, Z+
     eba:	7f 01       	movw	r14, r30
     ebc:	88 23       	and	r24, r24
     ebe:	09 f4       	brne	.+2      	; 0xec2 <vfprintf+0x3a>
     ec0:	ba c1       	rjmp	.+884    	; 0x1236 <vfprintf+0x3ae>
     ec2:	85 32       	cpi	r24, 0x25	; 37
     ec4:	39 f4       	brne	.+14     	; 0xed4 <vfprintf+0x4c>
     ec6:	93 fd       	sbrc	r25, 3
     ec8:	85 91       	lpm	r24, Z+
     eca:	93 ff       	sbrs	r25, 3
     ecc:	81 91       	ld	r24, Z+
     ece:	7f 01       	movw	r14, r30
     ed0:	85 32       	cpi	r24, 0x25	; 37
     ed2:	29 f4       	brne	.+10     	; 0xede <vfprintf+0x56>
     ed4:	b6 01       	movw	r22, r12
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 4b 09 	call	0x1296	; 0x1296 <fputc>
     edc:	e7 cf       	rjmp	.-50     	; 0xeac <vfprintf+0x24>
     ede:	91 2c       	mov	r9, r1
     ee0:	21 2c       	mov	r2, r1
     ee2:	31 2c       	mov	r3, r1
     ee4:	ff e1       	ldi	r31, 0x1F	; 31
     ee6:	f3 15       	cp	r31, r3
     ee8:	d8 f0       	brcs	.+54     	; 0xf20 <vfprintf+0x98>
     eea:	8b 32       	cpi	r24, 0x2B	; 43
     eec:	79 f0       	breq	.+30     	; 0xf0c <vfprintf+0x84>
     eee:	38 f4       	brcc	.+14     	; 0xefe <vfprintf+0x76>
     ef0:	80 32       	cpi	r24, 0x20	; 32
     ef2:	79 f0       	breq	.+30     	; 0xf12 <vfprintf+0x8a>
     ef4:	83 32       	cpi	r24, 0x23	; 35
     ef6:	a1 f4       	brne	.+40     	; 0xf20 <vfprintf+0x98>
     ef8:	23 2d       	mov	r18, r3
     efa:	20 61       	ori	r18, 0x10	; 16
     efc:	1d c0       	rjmp	.+58     	; 0xf38 <vfprintf+0xb0>
     efe:	8d 32       	cpi	r24, 0x2D	; 45
     f00:	61 f0       	breq	.+24     	; 0xf1a <vfprintf+0x92>
     f02:	80 33       	cpi	r24, 0x30	; 48
     f04:	69 f4       	brne	.+26     	; 0xf20 <vfprintf+0x98>
     f06:	23 2d       	mov	r18, r3
     f08:	21 60       	ori	r18, 0x01	; 1
     f0a:	16 c0       	rjmp	.+44     	; 0xf38 <vfprintf+0xb0>
     f0c:	83 2d       	mov	r24, r3
     f0e:	82 60       	ori	r24, 0x02	; 2
     f10:	38 2e       	mov	r3, r24
     f12:	e3 2d       	mov	r30, r3
     f14:	e4 60       	ori	r30, 0x04	; 4
     f16:	3e 2e       	mov	r3, r30
     f18:	2a c0       	rjmp	.+84     	; 0xf6e <vfprintf+0xe6>
     f1a:	f3 2d       	mov	r31, r3
     f1c:	f8 60       	ori	r31, 0x08	; 8
     f1e:	1d c0       	rjmp	.+58     	; 0xf5a <vfprintf+0xd2>
     f20:	37 fc       	sbrc	r3, 7
     f22:	2d c0       	rjmp	.+90     	; 0xf7e <vfprintf+0xf6>
     f24:	20 ed       	ldi	r18, 0xD0	; 208
     f26:	28 0f       	add	r18, r24
     f28:	2a 30       	cpi	r18, 0x0A	; 10
     f2a:	40 f0       	brcs	.+16     	; 0xf3c <vfprintf+0xb4>
     f2c:	8e 32       	cpi	r24, 0x2E	; 46
     f2e:	b9 f4       	brne	.+46     	; 0xf5e <vfprintf+0xd6>
     f30:	36 fc       	sbrc	r3, 6
     f32:	81 c1       	rjmp	.+770    	; 0x1236 <vfprintf+0x3ae>
     f34:	23 2d       	mov	r18, r3
     f36:	20 64       	ori	r18, 0x40	; 64
     f38:	32 2e       	mov	r3, r18
     f3a:	19 c0       	rjmp	.+50     	; 0xf6e <vfprintf+0xe6>
     f3c:	36 fe       	sbrs	r3, 6
     f3e:	06 c0       	rjmp	.+12     	; 0xf4c <vfprintf+0xc4>
     f40:	8a e0       	ldi	r24, 0x0A	; 10
     f42:	98 9e       	mul	r9, r24
     f44:	20 0d       	add	r18, r0
     f46:	11 24       	eor	r1, r1
     f48:	92 2e       	mov	r9, r18
     f4a:	11 c0       	rjmp	.+34     	; 0xf6e <vfprintf+0xe6>
     f4c:	ea e0       	ldi	r30, 0x0A	; 10
     f4e:	2e 9e       	mul	r2, r30
     f50:	20 0d       	add	r18, r0
     f52:	11 24       	eor	r1, r1
     f54:	22 2e       	mov	r2, r18
     f56:	f3 2d       	mov	r31, r3
     f58:	f0 62       	ori	r31, 0x20	; 32
     f5a:	3f 2e       	mov	r3, r31
     f5c:	08 c0       	rjmp	.+16     	; 0xf6e <vfprintf+0xe6>
     f5e:	8c 36       	cpi	r24, 0x6C	; 108
     f60:	21 f4       	brne	.+8      	; 0xf6a <vfprintf+0xe2>
     f62:	83 2d       	mov	r24, r3
     f64:	80 68       	ori	r24, 0x80	; 128
     f66:	38 2e       	mov	r3, r24
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <vfprintf+0xe6>
     f6a:	88 36       	cpi	r24, 0x68	; 104
     f6c:	41 f4       	brne	.+16     	; 0xf7e <vfprintf+0xf6>
     f6e:	f7 01       	movw	r30, r14
     f70:	93 fd       	sbrc	r25, 3
     f72:	85 91       	lpm	r24, Z+
     f74:	93 ff       	sbrs	r25, 3
     f76:	81 91       	ld	r24, Z+
     f78:	7f 01       	movw	r14, r30
     f7a:	81 11       	cpse	r24, r1
     f7c:	b3 cf       	rjmp	.-154    	; 0xee4 <vfprintf+0x5c>
     f7e:	98 2f       	mov	r25, r24
     f80:	9f 7d       	andi	r25, 0xDF	; 223
     f82:	95 54       	subi	r25, 0x45	; 69
     f84:	93 30       	cpi	r25, 0x03	; 3
     f86:	28 f4       	brcc	.+10     	; 0xf92 <vfprintf+0x10a>
     f88:	0c 5f       	subi	r16, 0xFC	; 252
     f8a:	1f 4f       	sbci	r17, 0xFF	; 255
     f8c:	9f e3       	ldi	r25, 0x3F	; 63
     f8e:	99 83       	std	Y+1, r25	; 0x01
     f90:	0d c0       	rjmp	.+26     	; 0xfac <vfprintf+0x124>
     f92:	83 36       	cpi	r24, 0x63	; 99
     f94:	31 f0       	breq	.+12     	; 0xfa2 <vfprintf+0x11a>
     f96:	83 37       	cpi	r24, 0x73	; 115
     f98:	71 f0       	breq	.+28     	; 0xfb6 <vfprintf+0x12e>
     f9a:	83 35       	cpi	r24, 0x53	; 83
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <vfprintf+0x118>
     f9e:	59 c0       	rjmp	.+178    	; 0x1052 <vfprintf+0x1ca>
     fa0:	21 c0       	rjmp	.+66     	; 0xfe4 <vfprintf+0x15c>
     fa2:	f8 01       	movw	r30, r16
     fa4:	80 81       	ld	r24, Z
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	0e 5f       	subi	r16, 0xFE	; 254
     faa:	1f 4f       	sbci	r17, 0xFF	; 255
     fac:	88 24       	eor	r8, r8
     fae:	83 94       	inc	r8
     fb0:	91 2c       	mov	r9, r1
     fb2:	53 01       	movw	r10, r6
     fb4:	13 c0       	rjmp	.+38     	; 0xfdc <vfprintf+0x154>
     fb6:	28 01       	movw	r4, r16
     fb8:	f2 e0       	ldi	r31, 0x02	; 2
     fba:	4f 0e       	add	r4, r31
     fbc:	51 1c       	adc	r5, r1
     fbe:	f8 01       	movw	r30, r16
     fc0:	a0 80       	ld	r10, Z
     fc2:	b1 80       	ldd	r11, Z+1	; 0x01
     fc4:	36 fe       	sbrs	r3, 6
     fc6:	03 c0       	rjmp	.+6      	; 0xfce <vfprintf+0x146>
     fc8:	69 2d       	mov	r22, r9
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <vfprintf+0x14a>
     fce:	6f ef       	ldi	r22, 0xFF	; 255
     fd0:	7f ef       	ldi	r23, 0xFF	; 255
     fd2:	c5 01       	movw	r24, r10
     fd4:	0e 94 30 09 	call	0x1260	; 0x1260 <strnlen>
     fd8:	4c 01       	movw	r8, r24
     fda:	82 01       	movw	r16, r4
     fdc:	f3 2d       	mov	r31, r3
     fde:	ff 77       	andi	r31, 0x7F	; 127
     fe0:	3f 2e       	mov	r3, r31
     fe2:	16 c0       	rjmp	.+44     	; 0x1010 <vfprintf+0x188>
     fe4:	28 01       	movw	r4, r16
     fe6:	22 e0       	ldi	r18, 0x02	; 2
     fe8:	42 0e       	add	r4, r18
     fea:	51 1c       	adc	r5, r1
     fec:	f8 01       	movw	r30, r16
     fee:	a0 80       	ld	r10, Z
     ff0:	b1 80       	ldd	r11, Z+1	; 0x01
     ff2:	36 fe       	sbrs	r3, 6
     ff4:	03 c0       	rjmp	.+6      	; 0xffc <vfprintf+0x174>
     ff6:	69 2d       	mov	r22, r9
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <vfprintf+0x178>
     ffc:	6f ef       	ldi	r22, 0xFF	; 255
     ffe:	7f ef       	ldi	r23, 0xFF	; 255
    1000:	c5 01       	movw	r24, r10
    1002:	0e 94 25 09 	call	0x124a	; 0x124a <strnlen_P>
    1006:	4c 01       	movw	r8, r24
    1008:	f3 2d       	mov	r31, r3
    100a:	f0 68       	ori	r31, 0x80	; 128
    100c:	3f 2e       	mov	r3, r31
    100e:	82 01       	movw	r16, r4
    1010:	33 fc       	sbrc	r3, 3
    1012:	1b c0       	rjmp	.+54     	; 0x104a <vfprintf+0x1c2>
    1014:	82 2d       	mov	r24, r2
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	88 16       	cp	r8, r24
    101a:	99 06       	cpc	r9, r25
    101c:	b0 f4       	brcc	.+44     	; 0x104a <vfprintf+0x1c2>
    101e:	b6 01       	movw	r22, r12
    1020:	80 e2       	ldi	r24, 0x20	; 32
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 4b 09 	call	0x1296	; 0x1296 <fputc>
    1028:	2a 94       	dec	r2
    102a:	f4 cf       	rjmp	.-24     	; 0x1014 <vfprintf+0x18c>
    102c:	f5 01       	movw	r30, r10
    102e:	37 fc       	sbrc	r3, 7
    1030:	85 91       	lpm	r24, Z+
    1032:	37 fe       	sbrs	r3, 7
    1034:	81 91       	ld	r24, Z+
    1036:	5f 01       	movw	r10, r30
    1038:	b6 01       	movw	r22, r12
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 4b 09 	call	0x1296	; 0x1296 <fputc>
    1040:	21 10       	cpse	r2, r1
    1042:	2a 94       	dec	r2
    1044:	21 e0       	ldi	r18, 0x01	; 1
    1046:	82 1a       	sub	r8, r18
    1048:	91 08       	sbc	r9, r1
    104a:	81 14       	cp	r8, r1
    104c:	91 04       	cpc	r9, r1
    104e:	71 f7       	brne	.-36     	; 0x102c <vfprintf+0x1a4>
    1050:	e8 c0       	rjmp	.+464    	; 0x1222 <vfprintf+0x39a>
    1052:	84 36       	cpi	r24, 0x64	; 100
    1054:	11 f0       	breq	.+4      	; 0x105a <vfprintf+0x1d2>
    1056:	89 36       	cpi	r24, 0x69	; 105
    1058:	41 f5       	brne	.+80     	; 0x10aa <vfprintf+0x222>
    105a:	f8 01       	movw	r30, r16
    105c:	37 fe       	sbrs	r3, 7
    105e:	07 c0       	rjmp	.+14     	; 0x106e <vfprintf+0x1e6>
    1060:	60 81       	ld	r22, Z
    1062:	71 81       	ldd	r23, Z+1	; 0x01
    1064:	82 81       	ldd	r24, Z+2	; 0x02
    1066:	93 81       	ldd	r25, Z+3	; 0x03
    1068:	0c 5f       	subi	r16, 0xFC	; 252
    106a:	1f 4f       	sbci	r17, 0xFF	; 255
    106c:	08 c0       	rjmp	.+16     	; 0x107e <vfprintf+0x1f6>
    106e:	60 81       	ld	r22, Z
    1070:	71 81       	ldd	r23, Z+1	; 0x01
    1072:	07 2e       	mov	r0, r23
    1074:	00 0c       	add	r0, r0
    1076:	88 0b       	sbc	r24, r24
    1078:	99 0b       	sbc	r25, r25
    107a:	0e 5f       	subi	r16, 0xFE	; 254
    107c:	1f 4f       	sbci	r17, 0xFF	; 255
    107e:	f3 2d       	mov	r31, r3
    1080:	ff 76       	andi	r31, 0x6F	; 111
    1082:	3f 2e       	mov	r3, r31
    1084:	97 ff       	sbrs	r25, 7
    1086:	09 c0       	rjmp	.+18     	; 0x109a <vfprintf+0x212>
    1088:	90 95       	com	r25
    108a:	80 95       	com	r24
    108c:	70 95       	com	r23
    108e:	61 95       	neg	r22
    1090:	7f 4f       	sbci	r23, 0xFF	; 255
    1092:	8f 4f       	sbci	r24, 0xFF	; 255
    1094:	9f 4f       	sbci	r25, 0xFF	; 255
    1096:	f0 68       	ori	r31, 0x80	; 128
    1098:	3f 2e       	mov	r3, r31
    109a:	2a e0       	ldi	r18, 0x0A	; 10
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	a3 01       	movw	r20, r6
    10a0:	0e 94 87 09 	call	0x130e	; 0x130e <__ultoa_invert>
    10a4:	88 2e       	mov	r8, r24
    10a6:	86 18       	sub	r8, r6
    10a8:	45 c0       	rjmp	.+138    	; 0x1134 <vfprintf+0x2ac>
    10aa:	85 37       	cpi	r24, 0x75	; 117
    10ac:	31 f4       	brne	.+12     	; 0x10ba <vfprintf+0x232>
    10ae:	23 2d       	mov	r18, r3
    10b0:	2f 7e       	andi	r18, 0xEF	; 239
    10b2:	b2 2e       	mov	r11, r18
    10b4:	2a e0       	ldi	r18, 0x0A	; 10
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	25 c0       	rjmp	.+74     	; 0x1104 <vfprintf+0x27c>
    10ba:	93 2d       	mov	r25, r3
    10bc:	99 7f       	andi	r25, 0xF9	; 249
    10be:	b9 2e       	mov	r11, r25
    10c0:	8f 36       	cpi	r24, 0x6F	; 111
    10c2:	c1 f0       	breq	.+48     	; 0x10f4 <vfprintf+0x26c>
    10c4:	18 f4       	brcc	.+6      	; 0x10cc <vfprintf+0x244>
    10c6:	88 35       	cpi	r24, 0x58	; 88
    10c8:	79 f0       	breq	.+30     	; 0x10e8 <vfprintf+0x260>
    10ca:	b5 c0       	rjmp	.+362    	; 0x1236 <vfprintf+0x3ae>
    10cc:	80 37       	cpi	r24, 0x70	; 112
    10ce:	19 f0       	breq	.+6      	; 0x10d6 <vfprintf+0x24e>
    10d0:	88 37       	cpi	r24, 0x78	; 120
    10d2:	21 f0       	breq	.+8      	; 0x10dc <vfprintf+0x254>
    10d4:	b0 c0       	rjmp	.+352    	; 0x1236 <vfprintf+0x3ae>
    10d6:	e9 2f       	mov	r30, r25
    10d8:	e0 61       	ori	r30, 0x10	; 16
    10da:	be 2e       	mov	r11, r30
    10dc:	b4 fe       	sbrs	r11, 4
    10de:	0d c0       	rjmp	.+26     	; 0x10fa <vfprintf+0x272>
    10e0:	fb 2d       	mov	r31, r11
    10e2:	f4 60       	ori	r31, 0x04	; 4
    10e4:	bf 2e       	mov	r11, r31
    10e6:	09 c0       	rjmp	.+18     	; 0x10fa <vfprintf+0x272>
    10e8:	34 fe       	sbrs	r3, 4
    10ea:	0a c0       	rjmp	.+20     	; 0x1100 <vfprintf+0x278>
    10ec:	29 2f       	mov	r18, r25
    10ee:	26 60       	ori	r18, 0x06	; 6
    10f0:	b2 2e       	mov	r11, r18
    10f2:	06 c0       	rjmp	.+12     	; 0x1100 <vfprintf+0x278>
    10f4:	28 e0       	ldi	r18, 0x08	; 8
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	05 c0       	rjmp	.+10     	; 0x1104 <vfprintf+0x27c>
    10fa:	20 e1       	ldi	r18, 0x10	; 16
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <vfprintf+0x27c>
    1100:	20 e1       	ldi	r18, 0x10	; 16
    1102:	32 e0       	ldi	r19, 0x02	; 2
    1104:	f8 01       	movw	r30, r16
    1106:	b7 fe       	sbrs	r11, 7
    1108:	07 c0       	rjmp	.+14     	; 0x1118 <vfprintf+0x290>
    110a:	60 81       	ld	r22, Z
    110c:	71 81       	ldd	r23, Z+1	; 0x01
    110e:	82 81       	ldd	r24, Z+2	; 0x02
    1110:	93 81       	ldd	r25, Z+3	; 0x03
    1112:	0c 5f       	subi	r16, 0xFC	; 252
    1114:	1f 4f       	sbci	r17, 0xFF	; 255
    1116:	06 c0       	rjmp	.+12     	; 0x1124 <vfprintf+0x29c>
    1118:	60 81       	ld	r22, Z
    111a:	71 81       	ldd	r23, Z+1	; 0x01
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 5f       	subi	r16, 0xFE	; 254
    1122:	1f 4f       	sbci	r17, 0xFF	; 255
    1124:	a3 01       	movw	r20, r6
    1126:	0e 94 87 09 	call	0x130e	; 0x130e <__ultoa_invert>
    112a:	88 2e       	mov	r8, r24
    112c:	86 18       	sub	r8, r6
    112e:	fb 2d       	mov	r31, r11
    1130:	ff 77       	andi	r31, 0x7F	; 127
    1132:	3f 2e       	mov	r3, r31
    1134:	36 fe       	sbrs	r3, 6
    1136:	0d c0       	rjmp	.+26     	; 0x1152 <vfprintf+0x2ca>
    1138:	23 2d       	mov	r18, r3
    113a:	2e 7f       	andi	r18, 0xFE	; 254
    113c:	a2 2e       	mov	r10, r18
    113e:	89 14       	cp	r8, r9
    1140:	58 f4       	brcc	.+22     	; 0x1158 <vfprintf+0x2d0>
    1142:	34 fe       	sbrs	r3, 4
    1144:	0b c0       	rjmp	.+22     	; 0x115c <vfprintf+0x2d4>
    1146:	32 fc       	sbrc	r3, 2
    1148:	09 c0       	rjmp	.+18     	; 0x115c <vfprintf+0x2d4>
    114a:	83 2d       	mov	r24, r3
    114c:	8e 7e       	andi	r24, 0xEE	; 238
    114e:	a8 2e       	mov	r10, r24
    1150:	05 c0       	rjmp	.+10     	; 0x115c <vfprintf+0x2d4>
    1152:	b8 2c       	mov	r11, r8
    1154:	a3 2c       	mov	r10, r3
    1156:	03 c0       	rjmp	.+6      	; 0x115e <vfprintf+0x2d6>
    1158:	b8 2c       	mov	r11, r8
    115a:	01 c0       	rjmp	.+2      	; 0x115e <vfprintf+0x2d6>
    115c:	b9 2c       	mov	r11, r9
    115e:	a4 fe       	sbrs	r10, 4
    1160:	0f c0       	rjmp	.+30     	; 0x1180 <vfprintf+0x2f8>
    1162:	fe 01       	movw	r30, r28
    1164:	e8 0d       	add	r30, r8
    1166:	f1 1d       	adc	r31, r1
    1168:	80 81       	ld	r24, Z
    116a:	80 33       	cpi	r24, 0x30	; 48
    116c:	21 f4       	brne	.+8      	; 0x1176 <vfprintf+0x2ee>
    116e:	9a 2d       	mov	r25, r10
    1170:	99 7e       	andi	r25, 0xE9	; 233
    1172:	a9 2e       	mov	r10, r25
    1174:	09 c0       	rjmp	.+18     	; 0x1188 <vfprintf+0x300>
    1176:	a2 fe       	sbrs	r10, 2
    1178:	06 c0       	rjmp	.+12     	; 0x1186 <vfprintf+0x2fe>
    117a:	b3 94       	inc	r11
    117c:	b3 94       	inc	r11
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <vfprintf+0x300>
    1180:	8a 2d       	mov	r24, r10
    1182:	86 78       	andi	r24, 0x86	; 134
    1184:	09 f0       	breq	.+2      	; 0x1188 <vfprintf+0x300>
    1186:	b3 94       	inc	r11
    1188:	a3 fc       	sbrc	r10, 3
    118a:	11 c0       	rjmp	.+34     	; 0x11ae <vfprintf+0x326>
    118c:	a0 fe       	sbrs	r10, 0
    118e:	06 c0       	rjmp	.+12     	; 0x119c <vfprintf+0x314>
    1190:	b2 14       	cp	r11, r2
    1192:	88 f4       	brcc	.+34     	; 0x11b6 <vfprintf+0x32e>
    1194:	28 0c       	add	r2, r8
    1196:	92 2c       	mov	r9, r2
    1198:	9b 18       	sub	r9, r11
    119a:	0e c0       	rjmp	.+28     	; 0x11b8 <vfprintf+0x330>
    119c:	b2 14       	cp	r11, r2
    119e:	60 f4       	brcc	.+24     	; 0x11b8 <vfprintf+0x330>
    11a0:	b6 01       	movw	r22, r12
    11a2:	80 e2       	ldi	r24, 0x20	; 32
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 4b 09 	call	0x1296	; 0x1296 <fputc>
    11aa:	b3 94       	inc	r11
    11ac:	f7 cf       	rjmp	.-18     	; 0x119c <vfprintf+0x314>
    11ae:	b2 14       	cp	r11, r2
    11b0:	18 f4       	brcc	.+6      	; 0x11b8 <vfprintf+0x330>
    11b2:	2b 18       	sub	r2, r11
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <vfprintf+0x332>
    11b6:	98 2c       	mov	r9, r8
    11b8:	21 2c       	mov	r2, r1
    11ba:	a4 fe       	sbrs	r10, 4
    11bc:	10 c0       	rjmp	.+32     	; 0x11de <vfprintf+0x356>
    11be:	b6 01       	movw	r22, r12
    11c0:	80 e3       	ldi	r24, 0x30	; 48
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 4b 09 	call	0x1296	; 0x1296 <fputc>
    11c8:	a2 fe       	sbrs	r10, 2
    11ca:	17 c0       	rjmp	.+46     	; 0x11fa <vfprintf+0x372>
    11cc:	a1 fc       	sbrc	r10, 1
    11ce:	03 c0       	rjmp	.+6      	; 0x11d6 <vfprintf+0x34e>
    11d0:	88 e7       	ldi	r24, 0x78	; 120
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <vfprintf+0x352>
    11d6:	88 e5       	ldi	r24, 0x58	; 88
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	b6 01       	movw	r22, r12
    11dc:	0c c0       	rjmp	.+24     	; 0x11f6 <vfprintf+0x36e>
    11de:	8a 2d       	mov	r24, r10
    11e0:	86 78       	andi	r24, 0x86	; 134
    11e2:	59 f0       	breq	.+22     	; 0x11fa <vfprintf+0x372>
    11e4:	a1 fe       	sbrs	r10, 1
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <vfprintf+0x364>
    11e8:	8b e2       	ldi	r24, 0x2B	; 43
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <vfprintf+0x366>
    11ec:	80 e2       	ldi	r24, 0x20	; 32
    11ee:	a7 fc       	sbrc	r10, 7
    11f0:	8d e2       	ldi	r24, 0x2D	; 45
    11f2:	b6 01       	movw	r22, r12
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 4b 09 	call	0x1296	; 0x1296 <fputc>
    11fa:	89 14       	cp	r8, r9
    11fc:	38 f4       	brcc	.+14     	; 0x120c <vfprintf+0x384>
    11fe:	b6 01       	movw	r22, r12
    1200:	80 e3       	ldi	r24, 0x30	; 48
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 4b 09 	call	0x1296	; 0x1296 <fputc>
    1208:	9a 94       	dec	r9
    120a:	f7 cf       	rjmp	.-18     	; 0x11fa <vfprintf+0x372>
    120c:	8a 94       	dec	r8
    120e:	f3 01       	movw	r30, r6
    1210:	e8 0d       	add	r30, r8
    1212:	f1 1d       	adc	r31, r1
    1214:	80 81       	ld	r24, Z
    1216:	b6 01       	movw	r22, r12
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 4b 09 	call	0x1296	; 0x1296 <fputc>
    121e:	81 10       	cpse	r8, r1
    1220:	f5 cf       	rjmp	.-22     	; 0x120c <vfprintf+0x384>
    1222:	22 20       	and	r2, r2
    1224:	09 f4       	brne	.+2      	; 0x1228 <vfprintf+0x3a0>
    1226:	42 ce       	rjmp	.-892    	; 0xeac <vfprintf+0x24>
    1228:	b6 01       	movw	r22, r12
    122a:	80 e2       	ldi	r24, 0x20	; 32
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	0e 94 4b 09 	call	0x1296	; 0x1296 <fputc>
    1232:	2a 94       	dec	r2
    1234:	f6 cf       	rjmp	.-20     	; 0x1222 <vfprintf+0x39a>
    1236:	f6 01       	movw	r30, r12
    1238:	86 81       	ldd	r24, Z+6	; 0x06
    123a:	97 81       	ldd	r25, Z+7	; 0x07
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <vfprintf+0x3ba>
    123e:	8f ef       	ldi	r24, 0xFF	; 255
    1240:	9f ef       	ldi	r25, 0xFF	; 255
    1242:	2b 96       	adiw	r28, 0x0b	; 11
    1244:	e2 e1       	ldi	r30, 0x12	; 18
    1246:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__epilogue_restores__>

0000124a <strnlen_P>:
    124a:	fc 01       	movw	r30, r24
    124c:	05 90       	lpm	r0, Z+
    124e:	61 50       	subi	r22, 0x01	; 1
    1250:	70 40       	sbci	r23, 0x00	; 0
    1252:	01 10       	cpse	r0, r1
    1254:	d8 f7       	brcc	.-10     	; 0x124c <strnlen_P+0x2>
    1256:	80 95       	com	r24
    1258:	90 95       	com	r25
    125a:	8e 0f       	add	r24, r30
    125c:	9f 1f       	adc	r25, r31
    125e:	08 95       	ret

00001260 <strnlen>:
    1260:	fc 01       	movw	r30, r24
    1262:	61 50       	subi	r22, 0x01	; 1
    1264:	70 40       	sbci	r23, 0x00	; 0
    1266:	01 90       	ld	r0, Z+
    1268:	01 10       	cpse	r0, r1
    126a:	d8 f7       	brcc	.-10     	; 0x1262 <strnlen+0x2>
    126c:	80 95       	com	r24
    126e:	90 95       	com	r25
    1270:	8e 0f       	add	r24, r30
    1272:	9f 1f       	adc	r25, r31
    1274:	08 95       	ret

00001276 <strrev>:
    1276:	dc 01       	movw	r26, r24
    1278:	fc 01       	movw	r30, r24
    127a:	67 2f       	mov	r22, r23
    127c:	71 91       	ld	r23, Z+
    127e:	77 23       	and	r23, r23
    1280:	e1 f7       	brne	.-8      	; 0x127a <strrev+0x4>
    1282:	32 97       	sbiw	r30, 0x02	; 2
    1284:	04 c0       	rjmp	.+8      	; 0x128e <strrev+0x18>
    1286:	7c 91       	ld	r23, X
    1288:	6d 93       	st	X+, r22
    128a:	70 83       	st	Z, r23
    128c:	62 91       	ld	r22, -Z
    128e:	ae 17       	cp	r26, r30
    1290:	bf 07       	cpc	r27, r31
    1292:	c8 f3       	brcs	.-14     	; 0x1286 <strrev+0x10>
    1294:	08 95       	ret

00001296 <fputc>:
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	fb 01       	movw	r30, r22
    12a0:	23 81       	ldd	r18, Z+3	; 0x03
    12a2:	21 fd       	sbrc	r18, 1
    12a4:	03 c0       	rjmp	.+6      	; 0x12ac <fputc+0x16>
    12a6:	8f ef       	ldi	r24, 0xFF	; 255
    12a8:	9f ef       	ldi	r25, 0xFF	; 255
    12aa:	2c c0       	rjmp	.+88     	; 0x1304 <fputc+0x6e>
    12ac:	22 ff       	sbrs	r18, 2
    12ae:	16 c0       	rjmp	.+44     	; 0x12dc <fputc+0x46>
    12b0:	46 81       	ldd	r20, Z+6	; 0x06
    12b2:	57 81       	ldd	r21, Z+7	; 0x07
    12b4:	24 81       	ldd	r18, Z+4	; 0x04
    12b6:	35 81       	ldd	r19, Z+5	; 0x05
    12b8:	42 17       	cp	r20, r18
    12ba:	53 07       	cpc	r21, r19
    12bc:	44 f4       	brge	.+16     	; 0x12ce <fputc+0x38>
    12be:	a0 81       	ld	r26, Z
    12c0:	b1 81       	ldd	r27, Z+1	; 0x01
    12c2:	9d 01       	movw	r18, r26
    12c4:	2f 5f       	subi	r18, 0xFF	; 255
    12c6:	3f 4f       	sbci	r19, 0xFF	; 255
    12c8:	31 83       	std	Z+1, r19	; 0x01
    12ca:	20 83       	st	Z, r18
    12cc:	8c 93       	st	X, r24
    12ce:	26 81       	ldd	r18, Z+6	; 0x06
    12d0:	37 81       	ldd	r19, Z+7	; 0x07
    12d2:	2f 5f       	subi	r18, 0xFF	; 255
    12d4:	3f 4f       	sbci	r19, 0xFF	; 255
    12d6:	37 83       	std	Z+7, r19	; 0x07
    12d8:	26 83       	std	Z+6, r18	; 0x06
    12da:	14 c0       	rjmp	.+40     	; 0x1304 <fputc+0x6e>
    12dc:	8b 01       	movw	r16, r22
    12de:	ec 01       	movw	r28, r24
    12e0:	fb 01       	movw	r30, r22
    12e2:	00 84       	ldd	r0, Z+8	; 0x08
    12e4:	f1 85       	ldd	r31, Z+9	; 0x09
    12e6:	e0 2d       	mov	r30, r0
    12e8:	09 95       	icall
    12ea:	89 2b       	or	r24, r25
    12ec:	e1 f6       	brne	.-72     	; 0x12a6 <fputc+0x10>
    12ee:	d8 01       	movw	r26, r16
    12f0:	16 96       	adiw	r26, 0x06	; 6
    12f2:	8d 91       	ld	r24, X+
    12f4:	9c 91       	ld	r25, X
    12f6:	17 97       	sbiw	r26, 0x07	; 7
    12f8:	01 96       	adiw	r24, 0x01	; 1
    12fa:	17 96       	adiw	r26, 0x07	; 7
    12fc:	9c 93       	st	X, r25
    12fe:	8e 93       	st	-X, r24
    1300:	16 97       	sbiw	r26, 0x06	; 6
    1302:	ce 01       	movw	r24, r28
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
    130a:	0f 91       	pop	r16
    130c:	08 95       	ret

0000130e <__ultoa_invert>:
    130e:	fa 01       	movw	r30, r20
    1310:	aa 27       	eor	r26, r26
    1312:	28 30       	cpi	r18, 0x08	; 8
    1314:	51 f1       	breq	.+84     	; 0x136a <__ultoa_invert+0x5c>
    1316:	20 31       	cpi	r18, 0x10	; 16
    1318:	81 f1       	breq	.+96     	; 0x137a <__ultoa_invert+0x6c>
    131a:	e8 94       	clt
    131c:	6f 93       	push	r22
    131e:	6e 7f       	andi	r22, 0xFE	; 254
    1320:	6e 5f       	subi	r22, 0xFE	; 254
    1322:	7f 4f       	sbci	r23, 0xFF	; 255
    1324:	8f 4f       	sbci	r24, 0xFF	; 255
    1326:	9f 4f       	sbci	r25, 0xFF	; 255
    1328:	af 4f       	sbci	r26, 0xFF	; 255
    132a:	b1 e0       	ldi	r27, 0x01	; 1
    132c:	3e d0       	rcall	.+124    	; 0x13aa <__ultoa_invert+0x9c>
    132e:	b4 e0       	ldi	r27, 0x04	; 4
    1330:	3c d0       	rcall	.+120    	; 0x13aa <__ultoa_invert+0x9c>
    1332:	67 0f       	add	r22, r23
    1334:	78 1f       	adc	r23, r24
    1336:	89 1f       	adc	r24, r25
    1338:	9a 1f       	adc	r25, r26
    133a:	a1 1d       	adc	r26, r1
    133c:	68 0f       	add	r22, r24
    133e:	79 1f       	adc	r23, r25
    1340:	8a 1f       	adc	r24, r26
    1342:	91 1d       	adc	r25, r1
    1344:	a1 1d       	adc	r26, r1
    1346:	6a 0f       	add	r22, r26
    1348:	71 1d       	adc	r23, r1
    134a:	81 1d       	adc	r24, r1
    134c:	91 1d       	adc	r25, r1
    134e:	a1 1d       	adc	r26, r1
    1350:	20 d0       	rcall	.+64     	; 0x1392 <__ultoa_invert+0x84>
    1352:	09 f4       	brne	.+2      	; 0x1356 <__ultoa_invert+0x48>
    1354:	68 94       	set
    1356:	3f 91       	pop	r19
    1358:	2a e0       	ldi	r18, 0x0A	; 10
    135a:	26 9f       	mul	r18, r22
    135c:	11 24       	eor	r1, r1
    135e:	30 19       	sub	r19, r0
    1360:	30 5d       	subi	r19, 0xD0	; 208
    1362:	31 93       	st	Z+, r19
    1364:	de f6       	brtc	.-74     	; 0x131c <__ultoa_invert+0xe>
    1366:	cf 01       	movw	r24, r30
    1368:	08 95       	ret
    136a:	46 2f       	mov	r20, r22
    136c:	47 70       	andi	r20, 0x07	; 7
    136e:	40 5d       	subi	r20, 0xD0	; 208
    1370:	41 93       	st	Z+, r20
    1372:	b3 e0       	ldi	r27, 0x03	; 3
    1374:	0f d0       	rcall	.+30     	; 0x1394 <__ultoa_invert+0x86>
    1376:	c9 f7       	brne	.-14     	; 0x136a <__ultoa_invert+0x5c>
    1378:	f6 cf       	rjmp	.-20     	; 0x1366 <__ultoa_invert+0x58>
    137a:	46 2f       	mov	r20, r22
    137c:	4f 70       	andi	r20, 0x0F	; 15
    137e:	40 5d       	subi	r20, 0xD0	; 208
    1380:	4a 33       	cpi	r20, 0x3A	; 58
    1382:	18 f0       	brcs	.+6      	; 0x138a <__ultoa_invert+0x7c>
    1384:	49 5d       	subi	r20, 0xD9	; 217
    1386:	31 fd       	sbrc	r19, 1
    1388:	40 52       	subi	r20, 0x20	; 32
    138a:	41 93       	st	Z+, r20
    138c:	02 d0       	rcall	.+4      	; 0x1392 <__ultoa_invert+0x84>
    138e:	a9 f7       	brne	.-22     	; 0x137a <__ultoa_invert+0x6c>
    1390:	ea cf       	rjmp	.-44     	; 0x1366 <__ultoa_invert+0x58>
    1392:	b4 e0       	ldi	r27, 0x04	; 4
    1394:	a6 95       	lsr	r26
    1396:	97 95       	ror	r25
    1398:	87 95       	ror	r24
    139a:	77 95       	ror	r23
    139c:	67 95       	ror	r22
    139e:	ba 95       	dec	r27
    13a0:	c9 f7       	brne	.-14     	; 0x1394 <__ultoa_invert+0x86>
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	61 05       	cpc	r22, r1
    13a6:	71 05       	cpc	r23, r1
    13a8:	08 95       	ret
    13aa:	9b 01       	movw	r18, r22
    13ac:	ac 01       	movw	r20, r24
    13ae:	0a 2e       	mov	r0, r26
    13b0:	06 94       	lsr	r0
    13b2:	57 95       	ror	r21
    13b4:	47 95       	ror	r20
    13b6:	37 95       	ror	r19
    13b8:	27 95       	ror	r18
    13ba:	ba 95       	dec	r27
    13bc:	c9 f7       	brne	.-14     	; 0x13b0 <__ultoa_invert+0xa2>
    13be:	62 0f       	add	r22, r18
    13c0:	73 1f       	adc	r23, r19
    13c2:	84 1f       	adc	r24, r20
    13c4:	95 1f       	adc	r25, r21
    13c6:	a0 1d       	adc	r26, r0
    13c8:	08 95       	ret

000013ca <__prologue_saves__>:
    13ca:	2f 92       	push	r2
    13cc:	3f 92       	push	r3
    13ce:	4f 92       	push	r4
    13d0:	5f 92       	push	r5
    13d2:	6f 92       	push	r6
    13d4:	7f 92       	push	r7
    13d6:	8f 92       	push	r8
    13d8:	9f 92       	push	r9
    13da:	af 92       	push	r10
    13dc:	bf 92       	push	r11
    13de:	cf 92       	push	r12
    13e0:	df 92       	push	r13
    13e2:	ef 92       	push	r14
    13e4:	ff 92       	push	r15
    13e6:	0f 93       	push	r16
    13e8:	1f 93       	push	r17
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	ca 1b       	sub	r28, r26
    13f4:	db 0b       	sbc	r29, r27
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	09 94       	ijmp

00001402 <__epilogue_restores__>:
    1402:	2a 88       	ldd	r2, Y+18	; 0x12
    1404:	39 88       	ldd	r3, Y+17	; 0x11
    1406:	48 88       	ldd	r4, Y+16	; 0x10
    1408:	5f 84       	ldd	r5, Y+15	; 0x0f
    140a:	6e 84       	ldd	r6, Y+14	; 0x0e
    140c:	7d 84       	ldd	r7, Y+13	; 0x0d
    140e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1410:	9b 84       	ldd	r9, Y+11	; 0x0b
    1412:	aa 84       	ldd	r10, Y+10	; 0x0a
    1414:	b9 84       	ldd	r11, Y+9	; 0x09
    1416:	c8 84       	ldd	r12, Y+8	; 0x08
    1418:	df 80       	ldd	r13, Y+7	; 0x07
    141a:	ee 80       	ldd	r14, Y+6	; 0x06
    141c:	fd 80       	ldd	r15, Y+5	; 0x05
    141e:	0c 81       	ldd	r16, Y+4	; 0x04
    1420:	1b 81       	ldd	r17, Y+3	; 0x03
    1422:	aa 81       	ldd	r26, Y+2	; 0x02
    1424:	b9 81       	ldd	r27, Y+1	; 0x01
    1426:	ce 0f       	add	r28, r30
    1428:	d1 1d       	adc	r29, r1
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	ed 01       	movw	r28, r26
    1436:	08 95       	ret

00001438 <_exit>:
    1438:	f8 94       	cli

0000143a <__stop_program>:
    143a:	ff cf       	rjmp	.-2      	; 0x143a <__stop_program>
